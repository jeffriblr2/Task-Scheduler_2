
task_scheduler_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f98  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08001140  08001140  00011140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080011f8  080011f8  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080011f8  080011f8  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080011f8  080011f8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080011f8  080011f8  000111f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080011fc  080011fc  000111fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08001200  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000068  08001268  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08001268  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000024ef  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000006fb  00000000  00000000  00022587  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001c8  00000000  00000000  00022c88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000180  00000000  00000000  00022e50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002c13  00000000  00000000  00022fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000017bc  00000000  00000000  00025be3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000094f4  00000000  00000000  0002739f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00030893  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b74  00000000  00000000  00030910  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000068 	.word	0x20000068
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08001128 	.word	0x08001128

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	2000006c 	.word	0x2000006c
 80001e4:	08001128 	.word	0x08001128

080001e8 <delay>:
#include "led.h"



void delay(uint32_t count)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b085      	sub	sp, #20
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
  for(uint32_t i = 0 ; i < count ; i++);
 80001f0:	2300      	movs	r3, #0
 80001f2:	60fb      	str	r3, [r7, #12]
 80001f4:	e002      	b.n	80001fc <delay+0x14>
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	3301      	adds	r3, #1
 80001fa:	60fb      	str	r3, [r7, #12]
 80001fc:	68fa      	ldr	r2, [r7, #12]
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	429a      	cmp	r2, r3
 8000202:	d3f8      	bcc.n	80001f6 <delay+0xe>
}
 8000204:	bf00      	nop
 8000206:	3714      	adds	r7, #20
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr

08000210 <led_init_all>:

void led_init_all(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0

	uint32_t *pRccAhb1enr = (uint32_t*)0x40023830;
 8000216:	4b19      	ldr	r3, [pc, #100]	; (800027c <led_init_all+0x6c>)
 8000218:	607b      	str	r3, [r7, #4]
	uint32_t *pGpiodModeReg = (uint32_t*)0x40020C00;
 800021a:	4b19      	ldr	r3, [pc, #100]	; (8000280 <led_init_all+0x70>)
 800021c:	603b      	str	r3, [r7, #0]


	*pRccAhb1enr |= ( 1 << 3);
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	f043 0208 	orr.w	r2, r3, #8
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	601a      	str	r2, [r3, #0]
	//configure LED_GREEN
	*pGpiodModeReg |= ( 1 << (2 * LED_GREEN));
 800022a:	683b      	ldr	r3, [r7, #0]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_ORANGE));
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_RED));
 8000242:	683b      	ldr	r3, [r7, #0]
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_BLUE));
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	601a      	str	r2, [r3, #0]
	*pGpioOpTypeReg |= ( 1 << (2 * LED_ORANGE));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_RED));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_BLUE));
#endif

    led_off(LED_GREEN);
 800025a:	200c      	movs	r0, #12
 800025c:	f000 f82a 	bl	80002b4 <led_off>
    led_off(LED_ORANGE);
 8000260:	200d      	movs	r0, #13
 8000262:	f000 f827 	bl	80002b4 <led_off>
    led_off(LED_RED);
 8000266:	200e      	movs	r0, #14
 8000268:	f000 f824 	bl	80002b4 <led_off>
    led_off(LED_BLUE);
 800026c:	200f      	movs	r0, #15
 800026e:	f000 f821 	bl	80002b4 <led_off>



}
 8000272:	bf00      	nop
 8000274:	3708      	adds	r7, #8
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	40023830 	.word	0x40023830
 8000280:	40020c00 	.word	0x40020c00

08000284 <led_on>:

void led_on(uint8_t led_no)
{
 8000284:	b480      	push	{r7}
 8000286:	b085      	sub	sp, #20
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	71fb      	strb	r3, [r7, #7]
  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 800028e:	4b08      	ldr	r3, [pc, #32]	; (80002b0 <led_on+0x2c>)
 8000290:	60fb      	str	r3, [r7, #12]
  *pGpiodDataReg |= ( 1 << led_no);
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	79fa      	ldrb	r2, [r7, #7]
 8000298:	2101      	movs	r1, #1
 800029a:	fa01 f202 	lsl.w	r2, r1, r2
 800029e:	431a      	orrs	r2, r3
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	601a      	str	r2, [r3, #0]

}
 80002a4:	bf00      	nop
 80002a6:	3714      	adds	r7, #20
 80002a8:	46bd      	mov	sp, r7
 80002aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ae:	4770      	bx	lr
 80002b0:	40020c14 	.word	0x40020c14

080002b4 <led_off>:

void led_off(uint8_t led_no)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b085      	sub	sp, #20
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	71fb      	strb	r3, [r7, #7]
	  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 80002be:	4b09      	ldr	r3, [pc, #36]	; (80002e4 <led_off+0x30>)
 80002c0:	60fb      	str	r3, [r7, #12]
	  *pGpiodDataReg &= ~( 1 << led_no);
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	79fa      	ldrb	r2, [r7, #7]
 80002c8:	2101      	movs	r1, #1
 80002ca:	fa01 f202 	lsl.w	r2, r1, r2
 80002ce:	43d2      	mvns	r2, r2
 80002d0:	401a      	ands	r2, r3
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	601a      	str	r2, [r3, #0]

}
 80002d6:	bf00      	nop
 80002d8:	3714      	adds	r7, #20
 80002da:	46bd      	mov	sp, r7
 80002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	40020c14 	.word	0x40020c14

080002e8 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
    enable_processor_faults();
 80002ec:	f000 f944 	bl	8000578 <enable_processor_faults>

	init_Scheduler_Stack(sched_stack_start);
 80002f0:	4807      	ldr	r0, [pc, #28]	; (8000310 <main+0x28>)
 80002f2:	f000 f88f 	bl	8000414 <init_Scheduler_Stack>


	init_Tasks_Stack();
 80002f6:	f000 f8bb 	bl	8000470 <init_Tasks_Stack>

	led_init_all();
 80002fa:	f7ff ff89 	bl	8000210 <led_init_all>

	init_Systick(ticks);
 80002fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000302:	f000 f84f 	bl	80003a4 <init_Systick>

	switch_sp_to_psp();
 8000306:	f000 f983 	bl	8000610 <switch_sp_to_psp>

	task1_run();
 800030a:	f000 f803 	bl	8000314 <task1_run>
	for(;;);
 800030e:	e7fe      	b.n	800030e <main+0x26>
 8000310:	2001f000 	.word	0x2001f000

08000314 <task1_run>:
}

void task1_run()
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_GREEN);
 8000318:	200c      	movs	r0, #12
 800031a:	f7ff ffb3 	bl	8000284 <led_on>
		delay(DELAY_COUNT_1S);
 800031e:	4805      	ldr	r0, [pc, #20]	; (8000334 <task1_run+0x20>)
 8000320:	f7ff ff62 	bl	80001e8 <delay>
		led_off(LED_GREEN);
 8000324:	200c      	movs	r0, #12
 8000326:	f7ff ffc5 	bl	80002b4 <led_off>
		delay(DELAY_COUNT_1S);
 800032a:	4802      	ldr	r0, [pc, #8]	; (8000334 <task1_run+0x20>)
 800032c:	f7ff ff5c 	bl	80001e8 <delay>
		led_on(LED_GREEN);
 8000330:	e7f2      	b.n	8000318 <task1_run+0x4>
 8000332:	bf00      	nop
 8000334:	001312d0 	.word	0x001312d0

08000338 <task2_run>:
	}
}

void task2_run()
{
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_ORANGE);
 800033c:	200d      	movs	r0, #13
 800033e:	f7ff ffa1 	bl	8000284 <led_on>
		delay(DELAY_COUNT_500MS);
 8000342:	4805      	ldr	r0, [pc, #20]	; (8000358 <task2_run+0x20>)
 8000344:	f7ff ff50 	bl	80001e8 <delay>
		led_off(LED_ORANGE);
 8000348:	200d      	movs	r0, #13
 800034a:	f7ff ffb3 	bl	80002b4 <led_off>
		delay(DELAY_COUNT_500MS);
 800034e:	4802      	ldr	r0, [pc, #8]	; (8000358 <task2_run+0x20>)
 8000350:	f7ff ff4a 	bl	80001e8 <delay>
		led_on(LED_ORANGE);
 8000354:	e7f2      	b.n	800033c <task2_run+0x4>
 8000356:	bf00      	nop
 8000358:	00098968 	.word	0x00098968

0800035c <task3_run>:
	}
}

void task3_run()
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_BLUE);
 8000360:	200f      	movs	r0, #15
 8000362:	f7ff ff8f 	bl	8000284 <led_on>
		delay(DELAY_COUNT_250MS);
 8000366:	4805      	ldr	r0, [pc, #20]	; (800037c <task3_run+0x20>)
 8000368:	f7ff ff3e 	bl	80001e8 <delay>
		led_off(LED_BLUE);
 800036c:	200f      	movs	r0, #15
 800036e:	f7ff ffa1 	bl	80002b4 <led_off>
		delay(DELAY_COUNT_250MS);
 8000372:	4802      	ldr	r0, [pc, #8]	; (800037c <task3_run+0x20>)
 8000374:	f7ff ff38 	bl	80001e8 <delay>
		led_on(LED_BLUE);
 8000378:	e7f2      	b.n	8000360 <task3_run+0x4>
 800037a:	bf00      	nop
 800037c:	0004c4b4 	.word	0x0004c4b4

08000380 <task4_run>:
	}
}

void task4_run()
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_RED);
 8000384:	200e      	movs	r0, #14
 8000386:	f7ff ff7d 	bl	8000284 <led_on>
		delay(DELAY_COUNT_125MS);
 800038a:	4805      	ldr	r0, [pc, #20]	; (80003a0 <task4_run+0x20>)
 800038c:	f7ff ff2c 	bl	80001e8 <delay>
		led_off(LED_RED);
 8000390:	200e      	movs	r0, #14
 8000392:	f7ff ff8f 	bl	80002b4 <led_off>
		delay(DELAY_COUNT_125MS);
 8000396:	4802      	ldr	r0, [pc, #8]	; (80003a0 <task4_run+0x20>)
 8000398:	f7ff ff26 	bl	80001e8 <delay>
		led_on(LED_RED);
 800039c:	e7f2      	b.n	8000384 <task4_run+0x4>
 800039e:	bf00      	nop
 80003a0:	0002625a 	.word	0x0002625a

080003a4 <init_Systick>:
	}
}

void init_Systick(uint32_t ticks_hz)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b087      	sub	sp, #28
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
	uint32_t* SRVR = (uint32_t*)0xE000E014;
 80003ac:	4b16      	ldr	r3, [pc, #88]	; (8000408 <init_Systick+0x64>)
 80003ae:	617b      	str	r3, [r7, #20]
	   uint32_t* SCSR = (uint32_t*)0xE000E010;  // SYSTICK CONTROL REGISTER
 80003b0:	4b16      	ldr	r3, [pc, #88]	; (800040c <init_Systick+0x68>)
 80003b2:	613b      	str	r3, [r7, #16]
	   uint32_t count = (systick_clk/ticks_hz)-1;
 80003b4:	4a16      	ldr	r2, [pc, #88]	; (8000410 <init_Systick+0x6c>)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80003bc:	3b01      	subs	r3, #1
 80003be:	60fb      	str	r3, [r7, #12]

	   *SRVR &= ~(0x00FFFFFF); // CLEAR VALUE OF SVR
 80003c0:	697b      	ldr	r3, [r7, #20]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80003c8:	697b      	ldr	r3, [r7, #20]
 80003ca:	601a      	str	r2, [r3, #0]
	   *SRVR |= count; // LOAD VALUE INTO SVR
 80003cc:	697b      	ldr	r3, [r7, #20]
 80003ce:	681a      	ldr	r2, [r3, #0]
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	431a      	orrs	r2, r3
 80003d4:	697b      	ldr	r3, [r7, #20]
 80003d6:	601a      	str	r2, [r3, #0]

	   *SCSR |= (1<<1); //ENABLE SYSTEM EXCEPTION REQUEST
 80003d8:	693b      	ldr	r3, [r7, #16]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	f043 0202 	orr.w	r2, r3, #2
 80003e0:	693b      	ldr	r3, [r7, #16]
 80003e2:	601a      	str	r2, [r3, #0]
	   *SCSR |= (1<<2); //INDICATES CLOCK SOURCE, PROCESSOR CLOCK SOURCE
 80003e4:	693b      	ldr	r3, [r7, #16]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	f043 0204 	orr.w	r2, r3, #4
 80003ec:	693b      	ldr	r3, [r7, #16]
 80003ee:	601a      	str	r2, [r3, #0]
	   *SCSR |= (1<<0); //ENABLE SYSTICK Handler/Counter
 80003f0:	693b      	ldr	r3, [r7, #16]
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	f043 0201 	orr.w	r2, r3, #1
 80003f8:	693b      	ldr	r3, [r7, #16]
 80003fa:	601a      	str	r2, [r3, #0]
}
 80003fc:	bf00      	nop
 80003fe:	371c      	adds	r7, #28
 8000400:	46bd      	mov	sp, r7
 8000402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000406:	4770      	bx	lr
 8000408:	e000e014 	.word	0xe000e014
 800040c:	e000e010 	.word	0xe000e010
 8000410:	00f42400 	.word	0x00f42400

08000414 <init_Scheduler_Stack>:

__attribute__((naked)) void init_Scheduler_Stack(uint32_t SHED_StackStart)
{
 8000414:	4603      	mov	r3, r0
    __asm volatile("MSR MSP,R0": : "r" (SHED_StackStart):);
 8000416:	f380 8808 	msr	MSP, r0
    __asm volatile("BX LR");  //Copies value of LR into PC
 800041a:	4770      	bx	lr
}
 800041c:	bf00      	nop

0800041e <SysTick_Handler>:

__attribute__((naked)) void SysTick_Handler(void)
{
 /*Save context of current task*/
 //Get psp value of the current task
	__asm volatile("MRS R0,PSP");
 800041e:	f3ef 8009 	mrs	r0, PSP
// Using the above PSP value store SF2(R4 TO R11)
	__asm volatile("STMDB R0!,{R4-R11}"); //R0! points to the address where the first register in the list gets stored
 8000422:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	//Stmdb-->decrement before storing multiple registers

	__asm volatile("PUSH {LR}");
 8000426:	b500      	push	{lr}
//Save current value of PSP
	__asm volatile("BL save_psp");
 8000428:	f000 f80c 	bl	8000444 <save_psp>

	 /*Retrieve context of next task*/
	//Decide the next task to run
	__asm volatile("BL update_next_task");
 800042c:	f000 f8fe 	bl	800062c <update_next_task>

	//get its past psp value
	__asm volatile("BL get_psp");
 8000430:	f000 f8dc 	bl	80005ec <get_psp>
	// Using the above PSP value retrieve SF2(R4 TO R11)
	__asm volatile("LDMIA R0!,{R4-R11}"); //R0! points to the address where the first register in the list gets loaded
 8000434:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	//ldmia-->load multiple registers and increment after

	//update psp and exit
	__asm volatile("MSR PSP,R0");
 8000438:	f380 8809 	msr	PSP, r0

	__asm volatile("POP {LR}");
 800043c:	f85d eb04 	ldr.w	lr, [sp], #4
	__asm volatile("BX LR");
 8000440:	4770      	bx	lr
}
 8000442:	bf00      	nop

08000444 <save_psp>:

void save_psp(uint32_t current_psp_value)
{
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
	user_tasks[current_task].psp_value=current_psp_value;
 800044c:	4b06      	ldr	r3, [pc, #24]	; (8000468 <save_psp+0x24>)
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	4a06      	ldr	r2, [pc, #24]	; (800046c <save_psp+0x28>)
 8000452:	011b      	lsls	r3, r3, #4
 8000454:	4413      	add	r3, r2
 8000456:	687a      	ldr	r2, [r7, #4]
 8000458:	601a      	str	r2, [r3, #0]
}
 800045a:	bf00      	nop
 800045c:	370c      	adds	r7, #12
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	20000084 	.word	0x20000084
 800046c:	20000094 	.word	0x20000094

08000470 <init_Tasks_Stack>:

void init_Tasks_Stack()
{
 8000470:	b480      	push	{r7}
 8000472:	b085      	sub	sp, #20
 8000474:	af00      	add	r7, sp, #0
	user_tasks[0].current_state = TASK_RUNNING_STATE;
 8000476:	4b37      	ldr	r3, [pc, #220]	; (8000554 <init_Tasks_Stack+0xe4>)
 8000478:	2200      	movs	r2, #0
 800047a:	721a      	strb	r2, [r3, #8]
	user_tasks[1].current_state = TASK_RUNNING_STATE;
 800047c:	4b35      	ldr	r3, [pc, #212]	; (8000554 <init_Tasks_Stack+0xe4>)
 800047e:	2200      	movs	r2, #0
 8000480:	761a      	strb	r2, [r3, #24]
	user_tasks[2].current_state = TASK_RUNNING_STATE;
 8000482:	4b34      	ldr	r3, [pc, #208]	; (8000554 <init_Tasks_Stack+0xe4>)
 8000484:	2200      	movs	r2, #0
 8000486:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	user_tasks[3].current_state = TASK_RUNNING_STATE;
 800048a:	4b32      	ldr	r3, [pc, #200]	; (8000554 <init_Tasks_Stack+0xe4>)
 800048c:	2200      	movs	r2, #0
 800048e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	user_tasks[4].current_state = TASK_RUNNING_STATE;
 8000492:	4b30      	ldr	r3, [pc, #192]	; (8000554 <init_Tasks_Stack+0xe4>)
 8000494:	2200      	movs	r2, #0
 8000496:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	user_tasks[0].psp_value = t1_stack_start;
 800049a:	4b2e      	ldr	r3, [pc, #184]	; (8000554 <init_Tasks_Stack+0xe4>)
 800049c:	4a2e      	ldr	r2, [pc, #184]	; (8000558 <init_Tasks_Stack+0xe8>)
 800049e:	601a      	str	r2, [r3, #0]
	user_tasks[1].psp_value = t2_stack_start;
 80004a0:	4b2c      	ldr	r3, [pc, #176]	; (8000554 <init_Tasks_Stack+0xe4>)
 80004a2:	4a2e      	ldr	r2, [pc, #184]	; (800055c <init_Tasks_Stack+0xec>)
 80004a4:	611a      	str	r2, [r3, #16]
	user_tasks[2].psp_value = t3_stack_start;
 80004a6:	4b2b      	ldr	r3, [pc, #172]	; (8000554 <init_Tasks_Stack+0xe4>)
 80004a8:	4a2d      	ldr	r2, [pc, #180]	; (8000560 <init_Tasks_Stack+0xf0>)
 80004aa:	621a      	str	r2, [r3, #32]
	user_tasks[3].psp_value = t4_stack_start;
 80004ac:	4b29      	ldr	r3, [pc, #164]	; (8000554 <init_Tasks_Stack+0xe4>)
 80004ae:	4a2d      	ldr	r2, [pc, #180]	; (8000564 <init_Tasks_Stack+0xf4>)
 80004b0:	631a      	str	r2, [r3, #48]	; 0x30

	user_tasks[0].task_handler = task1_run;
 80004b2:	4b28      	ldr	r3, [pc, #160]	; (8000554 <init_Tasks_Stack+0xe4>)
 80004b4:	4a2c      	ldr	r2, [pc, #176]	; (8000568 <init_Tasks_Stack+0xf8>)
 80004b6:	60da      	str	r2, [r3, #12]
	user_tasks[1].task_handler = task2_run;
 80004b8:	4b26      	ldr	r3, [pc, #152]	; (8000554 <init_Tasks_Stack+0xe4>)
 80004ba:	4a2c      	ldr	r2, [pc, #176]	; (800056c <init_Tasks_Stack+0xfc>)
 80004bc:	61da      	str	r2, [r3, #28]
	user_tasks[2].task_handler = task3_run;
 80004be:	4b25      	ldr	r3, [pc, #148]	; (8000554 <init_Tasks_Stack+0xe4>)
 80004c0:	4a2b      	ldr	r2, [pc, #172]	; (8000570 <init_Tasks_Stack+0x100>)
 80004c2:	62da      	str	r2, [r3, #44]	; 0x2c
	user_tasks[3].task_handler = task4_run;
 80004c4:	4b23      	ldr	r3, [pc, #140]	; (8000554 <init_Tasks_Stack+0xe4>)
 80004c6:	4a2b      	ldr	r2, [pc, #172]	; (8000574 <init_Tasks_Stack+0x104>)
 80004c8:	63da      	str	r2, [r3, #60]	; 0x3c

	uint32_t *pPsp;
  for(int i=0;i<Max_tasks;i++)
 80004ca:	2300      	movs	r3, #0
 80004cc:	60bb      	str	r3, [r7, #8]
 80004ce:	e037      	b.n	8000540 <init_Tasks_Stack+0xd0>
  {
    pPsp=(uint32_t*) user_tasks[i].psp_value;
 80004d0:	4a20      	ldr	r2, [pc, #128]	; (8000554 <init_Tasks_Stack+0xe4>)
 80004d2:	68bb      	ldr	r3, [r7, #8]
 80004d4:	011b      	lsls	r3, r3, #4
 80004d6:	4413      	add	r3, r2
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	60fb      	str	r3, [r7, #12]

    pPsp--;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	3b04      	subs	r3, #4
 80004e0:	60fb      	str	r3, [r7, #12]
    *pPsp=Dummy_xpsr;
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80004e8:	601a      	str	r2, [r3, #0]

    pPsp--;//PC
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	3b04      	subs	r3, #4
 80004ee:	60fb      	str	r3, [r7, #12]
    *pPsp=(uint32_t) user_tasks[i].task_handler;
 80004f0:	4a18      	ldr	r2, [pc, #96]	; (8000554 <init_Tasks_Stack+0xe4>)
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	011b      	lsls	r3, r3, #4
 80004f6:	4413      	add	r3, r2
 80004f8:	330c      	adds	r3, #12
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	461a      	mov	r2, r3
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	601a      	str	r2, [r3, #0]

    pPsp--;//LR
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	3b04      	subs	r3, #4
 8000506:	60fb      	str	r3, [r7, #12]
    *pPsp=0xFFFFFFFD;
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	f06f 0202 	mvn.w	r2, #2
 800050e:	601a      	str	r2, [r3, #0]
    for(int i=0;i<13;i++) //initializing Registers R0 to R12 as 0
 8000510:	2300      	movs	r3, #0
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	e008      	b.n	8000528 <init_Tasks_Stack+0xb8>
    { pPsp--;
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	3b04      	subs	r3, #4
 800051a:	60fb      	str	r3, [r7, #12]
    *pPsp=0;
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
    for(int i=0;i<13;i++) //initializing Registers R0 to R12 as 0
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	3301      	adds	r3, #1
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2b0c      	cmp	r3, #12
 800052c:	ddf3      	ble.n	8000516 <init_Tasks_Stack+0xa6>
    }
    user_tasks[i].psp_value=(uint32_t)pPsp; //Preserving value of PSP
 800052e:	68fa      	ldr	r2, [r7, #12]
 8000530:	4908      	ldr	r1, [pc, #32]	; (8000554 <init_Tasks_Stack+0xe4>)
 8000532:	68bb      	ldr	r3, [r7, #8]
 8000534:	011b      	lsls	r3, r3, #4
 8000536:	440b      	add	r3, r1
 8000538:	601a      	str	r2, [r3, #0]
  for(int i=0;i<Max_tasks;i++)
 800053a:	68bb      	ldr	r3, [r7, #8]
 800053c:	3301      	adds	r3, #1
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	68bb      	ldr	r3, [r7, #8]
 8000542:	2b03      	cmp	r3, #3
 8000544:	ddc4      	ble.n	80004d0 <init_Tasks_Stack+0x60>
  }
}
 8000546:	bf00      	nop
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	20000094 	.word	0x20000094
 8000558:	20020000 	.word	0x20020000
 800055c:	2001fc00 	.word	0x2001fc00
 8000560:	2001f800 	.word	0x2001f800
 8000564:	2001f400 	.word	0x2001f400
 8000568:	08000315 	.word	0x08000315
 800056c:	08000339 	.word	0x08000339
 8000570:	0800035d 	.word	0x0800035d
 8000574:	08000381 	.word	0x08000381

08000578 <enable_processor_faults>:

void enable_processor_faults()
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
	*SHCSR |= (1 << 16); // MEM MANAGE
 800057c:	4b0e      	ldr	r3, [pc, #56]	; (80005b8 <enable_processor_faults+0x40>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	681a      	ldr	r2, [r3, #0]
 8000582:	4b0d      	ldr	r3, [pc, #52]	; (80005b8 <enable_processor_faults+0x40>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800058a:	601a      	str	r2, [r3, #0]
	*SHCSR |= (1 << 17); // BUS FAULT
 800058c:	4b0a      	ldr	r3, [pc, #40]	; (80005b8 <enable_processor_faults+0x40>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	681a      	ldr	r2, [r3, #0]
 8000592:	4b09      	ldr	r3, [pc, #36]	; (80005b8 <enable_processor_faults+0x40>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800059a:	601a      	str	r2, [r3, #0]
	*SHCSR |= (1 << 18); // USAGE FAULT
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <enable_processor_faults+0x40>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	681a      	ldr	r2, [r3, #0]
 80005a2:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <enable_processor_faults+0x40>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80005aa:	601a      	str	r2, [r3, #0]
}
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	20000000 	.word	0x20000000

080005bc <HardFault_Handler>:

void HardFault_Handler(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  printf("Exception: Hard Fault\n");
 80005c0:	4801      	ldr	r0, [pc, #4]	; (80005c8 <HardFault_Handler+0xc>)
 80005c2:	f000 f9a5 	bl	8000910 <puts>
  while(1);
 80005c6:	e7fe      	b.n	80005c6 <HardFault_Handler+0xa>
 80005c8:	08001140 	.word	0x08001140

080005cc <MemManage_Handler>:
}

void MemManage_Handler(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	  printf("Exception: Memory management Fault\n");
 80005d0:	4801      	ldr	r0, [pc, #4]	; (80005d8 <MemManage_Handler+0xc>)
 80005d2:	f000 f99d 	bl	8000910 <puts>
	  while(1);
 80005d6:	e7fe      	b.n	80005d6 <MemManage_Handler+0xa>
 80005d8:	08001158 	.word	0x08001158

080005dc <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	  printf("Exception: Bus Fault\n");
 80005e0:	4801      	ldr	r0, [pc, #4]	; (80005e8 <BusFault_Handler+0xc>)
 80005e2:	f000 f995 	bl	8000910 <puts>
	  while(1);
 80005e6:	e7fe      	b.n	80005e6 <BusFault_Handler+0xa>
 80005e8:	0800117c 	.word	0x0800117c

080005ec <get_psp>:
	  //printf("UFSR = %lx\n",(*UFSR) & 0xFFFF);
	  while(1);
}
*/
uint32_t get_psp(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
 return user_tasks[current_task].psp_value;
 80005f0:	4b05      	ldr	r3, [pc, #20]	; (8000608 <get_psp+0x1c>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	4a05      	ldr	r2, [pc, #20]	; (800060c <get_psp+0x20>)
 80005f6:	011b      	lsls	r3, r3, #4
 80005f8:	4413      	add	r3, r2
 80005fa:	681b      	ldr	r3, [r3, #0]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	20000084 	.word	0x20000084
 800060c:	20000094 	.word	0x20000094

08000610 <switch_sp_to_psp>:
__attribute__((naked)) void switch_sp_to_psp(void)
{
  // Initialize PSP with task 1 stack start address
	__asm volatile("PUSH {LR}"); //preserve LR which connects back to main
 8000610:	b500      	push	{lr}
	__asm volatile("BL get_psp");
 8000612:	f7ff ffeb 	bl	80005ec <get_psp>
	__asm volatile("MSR PSP,R0"); //initialize psp
 8000616:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}"); // pop back LR
 800061a:	f85d eb04 	ldr.w	lr, [sp], #4

 // change SP to PSP using Control register
	__asm volatile("MOV R0,#0X02");
 800061e:	f04f 0002 	mov.w	r0, #2
	__asm volatile("MSR CONTROL,R0");
 8000622:	f380 8814 	msr	CONTROL, r0
	__asm volatile("BX LR");
 8000626:	4770      	bx	lr

}
 8000628:	bf00      	nop
	...

0800062c <update_next_task>:

void update_next_task(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
	current_task++;
 8000630:	4b08      	ldr	r3, [pc, #32]	; (8000654 <update_next_task+0x28>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	3301      	adds	r3, #1
 8000636:	b2da      	uxtb	r2, r3
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <update_next_task+0x28>)
 800063a:	701a      	strb	r2, [r3, #0]
	current_task=current_task%Max_tasks;
 800063c:	4b05      	ldr	r3, [pc, #20]	; (8000654 <update_next_task+0x28>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	f003 0303 	and.w	r3, r3, #3
 8000644:	b2da      	uxtb	r2, r3
 8000646:	4b03      	ldr	r3, [pc, #12]	; (8000654 <update_next_task+0x28>)
 8000648:	701a      	strb	r2, [r3, #0]
}
 800064a:	bf00      	nop
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	20000084 	.word	0x20000084

08000658 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b086      	sub	sp, #24
 800065c:	af00      	add	r7, sp, #0
 800065e:	60f8      	str	r0, [r7, #12]
 8000660:	60b9      	str	r1, [r7, #8]
 8000662:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]
 8000668:	e00a      	b.n	8000680 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800066a:	f3af 8000 	nop.w
 800066e:	4601      	mov	r1, r0
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	1c5a      	adds	r2, r3, #1
 8000674:	60ba      	str	r2, [r7, #8]
 8000676:	b2ca      	uxtb	r2, r1
 8000678:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800067a:	697b      	ldr	r3, [r7, #20]
 800067c:	3301      	adds	r3, #1
 800067e:	617b      	str	r3, [r7, #20]
 8000680:	697a      	ldr	r2, [r7, #20]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	429a      	cmp	r2, r3
 8000686:	dbf0      	blt.n	800066a <_read+0x12>
	}

return len;
 8000688:	687b      	ldr	r3, [r7, #4]
}
 800068a:	4618      	mov	r0, r3
 800068c:	3718      	adds	r7, #24
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}

08000692 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	b086      	sub	sp, #24
 8000696:	af00      	add	r7, sp, #0
 8000698:	60f8      	str	r0, [r7, #12]
 800069a:	60b9      	str	r1, [r7, #8]
 800069c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800069e:	2300      	movs	r3, #0
 80006a0:	617b      	str	r3, [r7, #20]
 80006a2:	e009      	b.n	80006b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	1c5a      	adds	r2, r3, #1
 80006a8:	60ba      	str	r2, [r7, #8]
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	4618      	mov	r0, r3
 80006ae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006b2:	697b      	ldr	r3, [r7, #20]
 80006b4:	3301      	adds	r3, #1
 80006b6:	617b      	str	r3, [r7, #20]
 80006b8:	697a      	ldr	r2, [r7, #20]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	429a      	cmp	r2, r3
 80006be:	dbf1      	blt.n	80006a4 <_write+0x12>
	}
	return len;
 80006c0:	687b      	ldr	r3, [r7, #4]
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3718      	adds	r7, #24
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}

080006ca <_close>:

int _close(int file)
{
 80006ca:	b480      	push	{r7}
 80006cc:	b083      	sub	sp, #12
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	6078      	str	r0, [r7, #4]
	return -1;
 80006d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr

080006e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006e2:	b480      	push	{r7}
 80006e4:	b083      	sub	sp, #12
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	6078      	str	r0, [r7, #4]
 80006ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006f2:	605a      	str	r2, [r3, #4]
	return 0;
 80006f4:	2300      	movs	r3, #0
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr

08000702 <_isatty>:

int _isatty(int file)
{
 8000702:	b480      	push	{r7}
 8000704:	b083      	sub	sp, #12
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]
	return 1;
 800070a:	2301      	movs	r3, #1
}
 800070c:	4618      	mov	r0, r3
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr

08000718 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000718:	b480      	push	{r7}
 800071a:	b085      	sub	sp, #20
 800071c:	af00      	add	r7, sp, #0
 800071e:	60f8      	str	r0, [r7, #12]
 8000720:	60b9      	str	r1, [r7, #8]
 8000722:	607a      	str	r2, [r7, #4]
	return 0;
 8000724:	2300      	movs	r3, #0
}
 8000726:	4618      	mov	r0, r3
 8000728:	3714      	adds	r7, #20
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
	...

08000734 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800073c:	4a14      	ldr	r2, [pc, #80]	; (8000790 <_sbrk+0x5c>)
 800073e:	4b15      	ldr	r3, [pc, #84]	; (8000794 <_sbrk+0x60>)
 8000740:	1ad3      	subs	r3, r2, r3
 8000742:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000748:	4b13      	ldr	r3, [pc, #76]	; (8000798 <_sbrk+0x64>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d102      	bne.n	8000756 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000750:	4b11      	ldr	r3, [pc, #68]	; (8000798 <_sbrk+0x64>)
 8000752:	4a12      	ldr	r2, [pc, #72]	; (800079c <_sbrk+0x68>)
 8000754:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000756:	4b10      	ldr	r3, [pc, #64]	; (8000798 <_sbrk+0x64>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4413      	add	r3, r2
 800075e:	693a      	ldr	r2, [r7, #16]
 8000760:	429a      	cmp	r2, r3
 8000762:	d207      	bcs.n	8000774 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000764:	f000 f846 	bl	80007f4 <__errno>
 8000768:	4602      	mov	r2, r0
 800076a:	230c      	movs	r3, #12
 800076c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800076e:	f04f 33ff 	mov.w	r3, #4294967295
 8000772:	e009      	b.n	8000788 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000774:	4b08      	ldr	r3, [pc, #32]	; (8000798 <_sbrk+0x64>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800077a:	4b07      	ldr	r3, [pc, #28]	; (8000798 <_sbrk+0x64>)
 800077c:	681a      	ldr	r2, [r3, #0]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4413      	add	r3, r2
 8000782:	4a05      	ldr	r2, [pc, #20]	; (8000798 <_sbrk+0x64>)
 8000784:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000786:	68fb      	ldr	r3, [r7, #12]
}
 8000788:	4618      	mov	r0, r3
 800078a:	3718      	adds	r7, #24
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20020000 	.word	0x20020000
 8000794:	00000400 	.word	0x00000400
 8000798:	20000088 	.word	0x20000088
 800079c:	200000d8 	.word	0x200000d8

080007a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007a0:	480d      	ldr	r0, [pc, #52]	; (80007d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007a2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80007a4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007a8:	480c      	ldr	r0, [pc, #48]	; (80007dc <LoopForever+0x6>)
  ldr r1, =_edata
 80007aa:	490d      	ldr	r1, [pc, #52]	; (80007e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007ac:	4a0d      	ldr	r2, [pc, #52]	; (80007e4 <LoopForever+0xe>)
  movs r3, #0
 80007ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007b0:	e002      	b.n	80007b8 <LoopCopyDataInit>

080007b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007b6:	3304      	adds	r3, #4

080007b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007bc:	d3f9      	bcc.n	80007b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007be:	4a0a      	ldr	r2, [pc, #40]	; (80007e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007c0:	4c0a      	ldr	r4, [pc, #40]	; (80007ec <LoopForever+0x16>)
  movs r3, #0
 80007c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c4:	e001      	b.n	80007ca <LoopFillZerobss>

080007c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c8:	3204      	adds	r2, #4

080007ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007cc:	d3fb      	bcc.n	80007c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007ce:	f000 f817 	bl	8000800 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007d2:	f7ff fd89 	bl	80002e8 <main>

080007d6 <LoopForever>:

LoopForever:
    b LoopForever
 80007d6:	e7fe      	b.n	80007d6 <LoopForever>
  ldr   r0, =_estack
 80007d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80007e4:	08001200 	.word	0x08001200
  ldr r2, =_sbss
 80007e8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80007ec:	200000d8 	.word	0x200000d8

080007f0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007f0:	e7fe      	b.n	80007f0 <ADC_IRQHandler>
	...

080007f4 <__errno>:
 80007f4:	4b01      	ldr	r3, [pc, #4]	; (80007fc <__errno+0x8>)
 80007f6:	6818      	ldr	r0, [r3, #0]
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	20000004 	.word	0x20000004

08000800 <__libc_init_array>:
 8000800:	b570      	push	{r4, r5, r6, lr}
 8000802:	4e0d      	ldr	r6, [pc, #52]	; (8000838 <__libc_init_array+0x38>)
 8000804:	4c0d      	ldr	r4, [pc, #52]	; (800083c <__libc_init_array+0x3c>)
 8000806:	1ba4      	subs	r4, r4, r6
 8000808:	10a4      	asrs	r4, r4, #2
 800080a:	2500      	movs	r5, #0
 800080c:	42a5      	cmp	r5, r4
 800080e:	d109      	bne.n	8000824 <__libc_init_array+0x24>
 8000810:	4e0b      	ldr	r6, [pc, #44]	; (8000840 <__libc_init_array+0x40>)
 8000812:	4c0c      	ldr	r4, [pc, #48]	; (8000844 <__libc_init_array+0x44>)
 8000814:	f000 fc88 	bl	8001128 <_init>
 8000818:	1ba4      	subs	r4, r4, r6
 800081a:	10a4      	asrs	r4, r4, #2
 800081c:	2500      	movs	r5, #0
 800081e:	42a5      	cmp	r5, r4
 8000820:	d105      	bne.n	800082e <__libc_init_array+0x2e>
 8000822:	bd70      	pop	{r4, r5, r6, pc}
 8000824:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000828:	4798      	blx	r3
 800082a:	3501      	adds	r5, #1
 800082c:	e7ee      	b.n	800080c <__libc_init_array+0xc>
 800082e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000832:	4798      	blx	r3
 8000834:	3501      	adds	r5, #1
 8000836:	e7f2      	b.n	800081e <__libc_init_array+0x1e>
 8000838:	080011f8 	.word	0x080011f8
 800083c:	080011f8 	.word	0x080011f8
 8000840:	080011f8 	.word	0x080011f8
 8000844:	080011fc 	.word	0x080011fc

08000848 <memset>:
 8000848:	4402      	add	r2, r0
 800084a:	4603      	mov	r3, r0
 800084c:	4293      	cmp	r3, r2
 800084e:	d100      	bne.n	8000852 <memset+0xa>
 8000850:	4770      	bx	lr
 8000852:	f803 1b01 	strb.w	r1, [r3], #1
 8000856:	e7f9      	b.n	800084c <memset+0x4>

08000858 <_puts_r>:
 8000858:	b570      	push	{r4, r5, r6, lr}
 800085a:	460e      	mov	r6, r1
 800085c:	4605      	mov	r5, r0
 800085e:	b118      	cbz	r0, 8000868 <_puts_r+0x10>
 8000860:	6983      	ldr	r3, [r0, #24]
 8000862:	b90b      	cbnz	r3, 8000868 <_puts_r+0x10>
 8000864:	f000 fa0c 	bl	8000c80 <__sinit>
 8000868:	69ab      	ldr	r3, [r5, #24]
 800086a:	68ac      	ldr	r4, [r5, #8]
 800086c:	b913      	cbnz	r3, 8000874 <_puts_r+0x1c>
 800086e:	4628      	mov	r0, r5
 8000870:	f000 fa06 	bl	8000c80 <__sinit>
 8000874:	4b23      	ldr	r3, [pc, #140]	; (8000904 <_puts_r+0xac>)
 8000876:	429c      	cmp	r4, r3
 8000878:	d117      	bne.n	80008aa <_puts_r+0x52>
 800087a:	686c      	ldr	r4, [r5, #4]
 800087c:	89a3      	ldrh	r3, [r4, #12]
 800087e:	071b      	lsls	r3, r3, #28
 8000880:	d51d      	bpl.n	80008be <_puts_r+0x66>
 8000882:	6923      	ldr	r3, [r4, #16]
 8000884:	b1db      	cbz	r3, 80008be <_puts_r+0x66>
 8000886:	3e01      	subs	r6, #1
 8000888:	68a3      	ldr	r3, [r4, #8]
 800088a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800088e:	3b01      	subs	r3, #1
 8000890:	60a3      	str	r3, [r4, #8]
 8000892:	b9e9      	cbnz	r1, 80008d0 <_puts_r+0x78>
 8000894:	2b00      	cmp	r3, #0
 8000896:	da2e      	bge.n	80008f6 <_puts_r+0x9e>
 8000898:	4622      	mov	r2, r4
 800089a:	210a      	movs	r1, #10
 800089c:	4628      	mov	r0, r5
 800089e:	f000 f83f 	bl	8000920 <__swbuf_r>
 80008a2:	3001      	adds	r0, #1
 80008a4:	d011      	beq.n	80008ca <_puts_r+0x72>
 80008a6:	200a      	movs	r0, #10
 80008a8:	e011      	b.n	80008ce <_puts_r+0x76>
 80008aa:	4b17      	ldr	r3, [pc, #92]	; (8000908 <_puts_r+0xb0>)
 80008ac:	429c      	cmp	r4, r3
 80008ae:	d101      	bne.n	80008b4 <_puts_r+0x5c>
 80008b0:	68ac      	ldr	r4, [r5, #8]
 80008b2:	e7e3      	b.n	800087c <_puts_r+0x24>
 80008b4:	4b15      	ldr	r3, [pc, #84]	; (800090c <_puts_r+0xb4>)
 80008b6:	429c      	cmp	r4, r3
 80008b8:	bf08      	it	eq
 80008ba:	68ec      	ldreq	r4, [r5, #12]
 80008bc:	e7de      	b.n	800087c <_puts_r+0x24>
 80008be:	4621      	mov	r1, r4
 80008c0:	4628      	mov	r0, r5
 80008c2:	f000 f87f 	bl	80009c4 <__swsetup_r>
 80008c6:	2800      	cmp	r0, #0
 80008c8:	d0dd      	beq.n	8000886 <_puts_r+0x2e>
 80008ca:	f04f 30ff 	mov.w	r0, #4294967295
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	da04      	bge.n	80008de <_puts_r+0x86>
 80008d4:	69a2      	ldr	r2, [r4, #24]
 80008d6:	429a      	cmp	r2, r3
 80008d8:	dc06      	bgt.n	80008e8 <_puts_r+0x90>
 80008da:	290a      	cmp	r1, #10
 80008dc:	d004      	beq.n	80008e8 <_puts_r+0x90>
 80008de:	6823      	ldr	r3, [r4, #0]
 80008e0:	1c5a      	adds	r2, r3, #1
 80008e2:	6022      	str	r2, [r4, #0]
 80008e4:	7019      	strb	r1, [r3, #0]
 80008e6:	e7cf      	b.n	8000888 <_puts_r+0x30>
 80008e8:	4622      	mov	r2, r4
 80008ea:	4628      	mov	r0, r5
 80008ec:	f000 f818 	bl	8000920 <__swbuf_r>
 80008f0:	3001      	adds	r0, #1
 80008f2:	d1c9      	bne.n	8000888 <_puts_r+0x30>
 80008f4:	e7e9      	b.n	80008ca <_puts_r+0x72>
 80008f6:	6823      	ldr	r3, [r4, #0]
 80008f8:	200a      	movs	r0, #10
 80008fa:	1c5a      	adds	r2, r3, #1
 80008fc:	6022      	str	r2, [r4, #0]
 80008fe:	7018      	strb	r0, [r3, #0]
 8000900:	e7e5      	b.n	80008ce <_puts_r+0x76>
 8000902:	bf00      	nop
 8000904:	080011b8 	.word	0x080011b8
 8000908:	080011d8 	.word	0x080011d8
 800090c:	08001198 	.word	0x08001198

08000910 <puts>:
 8000910:	4b02      	ldr	r3, [pc, #8]	; (800091c <puts+0xc>)
 8000912:	4601      	mov	r1, r0
 8000914:	6818      	ldr	r0, [r3, #0]
 8000916:	f7ff bf9f 	b.w	8000858 <_puts_r>
 800091a:	bf00      	nop
 800091c:	20000004 	.word	0x20000004

08000920 <__swbuf_r>:
 8000920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000922:	460e      	mov	r6, r1
 8000924:	4614      	mov	r4, r2
 8000926:	4605      	mov	r5, r0
 8000928:	b118      	cbz	r0, 8000932 <__swbuf_r+0x12>
 800092a:	6983      	ldr	r3, [r0, #24]
 800092c:	b90b      	cbnz	r3, 8000932 <__swbuf_r+0x12>
 800092e:	f000 f9a7 	bl	8000c80 <__sinit>
 8000932:	4b21      	ldr	r3, [pc, #132]	; (80009b8 <__swbuf_r+0x98>)
 8000934:	429c      	cmp	r4, r3
 8000936:	d12a      	bne.n	800098e <__swbuf_r+0x6e>
 8000938:	686c      	ldr	r4, [r5, #4]
 800093a:	69a3      	ldr	r3, [r4, #24]
 800093c:	60a3      	str	r3, [r4, #8]
 800093e:	89a3      	ldrh	r3, [r4, #12]
 8000940:	071a      	lsls	r2, r3, #28
 8000942:	d52e      	bpl.n	80009a2 <__swbuf_r+0x82>
 8000944:	6923      	ldr	r3, [r4, #16]
 8000946:	b363      	cbz	r3, 80009a2 <__swbuf_r+0x82>
 8000948:	6923      	ldr	r3, [r4, #16]
 800094a:	6820      	ldr	r0, [r4, #0]
 800094c:	1ac0      	subs	r0, r0, r3
 800094e:	6963      	ldr	r3, [r4, #20]
 8000950:	b2f6      	uxtb	r6, r6
 8000952:	4283      	cmp	r3, r0
 8000954:	4637      	mov	r7, r6
 8000956:	dc04      	bgt.n	8000962 <__swbuf_r+0x42>
 8000958:	4621      	mov	r1, r4
 800095a:	4628      	mov	r0, r5
 800095c:	f000 f926 	bl	8000bac <_fflush_r>
 8000960:	bb28      	cbnz	r0, 80009ae <__swbuf_r+0x8e>
 8000962:	68a3      	ldr	r3, [r4, #8]
 8000964:	3b01      	subs	r3, #1
 8000966:	60a3      	str	r3, [r4, #8]
 8000968:	6823      	ldr	r3, [r4, #0]
 800096a:	1c5a      	adds	r2, r3, #1
 800096c:	6022      	str	r2, [r4, #0]
 800096e:	701e      	strb	r6, [r3, #0]
 8000970:	6963      	ldr	r3, [r4, #20]
 8000972:	3001      	adds	r0, #1
 8000974:	4283      	cmp	r3, r0
 8000976:	d004      	beq.n	8000982 <__swbuf_r+0x62>
 8000978:	89a3      	ldrh	r3, [r4, #12]
 800097a:	07db      	lsls	r3, r3, #31
 800097c:	d519      	bpl.n	80009b2 <__swbuf_r+0x92>
 800097e:	2e0a      	cmp	r6, #10
 8000980:	d117      	bne.n	80009b2 <__swbuf_r+0x92>
 8000982:	4621      	mov	r1, r4
 8000984:	4628      	mov	r0, r5
 8000986:	f000 f911 	bl	8000bac <_fflush_r>
 800098a:	b190      	cbz	r0, 80009b2 <__swbuf_r+0x92>
 800098c:	e00f      	b.n	80009ae <__swbuf_r+0x8e>
 800098e:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <__swbuf_r+0x9c>)
 8000990:	429c      	cmp	r4, r3
 8000992:	d101      	bne.n	8000998 <__swbuf_r+0x78>
 8000994:	68ac      	ldr	r4, [r5, #8]
 8000996:	e7d0      	b.n	800093a <__swbuf_r+0x1a>
 8000998:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <__swbuf_r+0xa0>)
 800099a:	429c      	cmp	r4, r3
 800099c:	bf08      	it	eq
 800099e:	68ec      	ldreq	r4, [r5, #12]
 80009a0:	e7cb      	b.n	800093a <__swbuf_r+0x1a>
 80009a2:	4621      	mov	r1, r4
 80009a4:	4628      	mov	r0, r5
 80009a6:	f000 f80d 	bl	80009c4 <__swsetup_r>
 80009aa:	2800      	cmp	r0, #0
 80009ac:	d0cc      	beq.n	8000948 <__swbuf_r+0x28>
 80009ae:	f04f 37ff 	mov.w	r7, #4294967295
 80009b2:	4638      	mov	r0, r7
 80009b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009b6:	bf00      	nop
 80009b8:	080011b8 	.word	0x080011b8
 80009bc:	080011d8 	.word	0x080011d8
 80009c0:	08001198 	.word	0x08001198

080009c4 <__swsetup_r>:
 80009c4:	4b32      	ldr	r3, [pc, #200]	; (8000a90 <__swsetup_r+0xcc>)
 80009c6:	b570      	push	{r4, r5, r6, lr}
 80009c8:	681d      	ldr	r5, [r3, #0]
 80009ca:	4606      	mov	r6, r0
 80009cc:	460c      	mov	r4, r1
 80009ce:	b125      	cbz	r5, 80009da <__swsetup_r+0x16>
 80009d0:	69ab      	ldr	r3, [r5, #24]
 80009d2:	b913      	cbnz	r3, 80009da <__swsetup_r+0x16>
 80009d4:	4628      	mov	r0, r5
 80009d6:	f000 f953 	bl	8000c80 <__sinit>
 80009da:	4b2e      	ldr	r3, [pc, #184]	; (8000a94 <__swsetup_r+0xd0>)
 80009dc:	429c      	cmp	r4, r3
 80009de:	d10f      	bne.n	8000a00 <__swsetup_r+0x3c>
 80009e0:	686c      	ldr	r4, [r5, #4]
 80009e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80009e6:	b29a      	uxth	r2, r3
 80009e8:	0715      	lsls	r5, r2, #28
 80009ea:	d42c      	bmi.n	8000a46 <__swsetup_r+0x82>
 80009ec:	06d0      	lsls	r0, r2, #27
 80009ee:	d411      	bmi.n	8000a14 <__swsetup_r+0x50>
 80009f0:	2209      	movs	r2, #9
 80009f2:	6032      	str	r2, [r6, #0]
 80009f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009f8:	81a3      	strh	r3, [r4, #12]
 80009fa:	f04f 30ff 	mov.w	r0, #4294967295
 80009fe:	e03e      	b.n	8000a7e <__swsetup_r+0xba>
 8000a00:	4b25      	ldr	r3, [pc, #148]	; (8000a98 <__swsetup_r+0xd4>)
 8000a02:	429c      	cmp	r4, r3
 8000a04:	d101      	bne.n	8000a0a <__swsetup_r+0x46>
 8000a06:	68ac      	ldr	r4, [r5, #8]
 8000a08:	e7eb      	b.n	80009e2 <__swsetup_r+0x1e>
 8000a0a:	4b24      	ldr	r3, [pc, #144]	; (8000a9c <__swsetup_r+0xd8>)
 8000a0c:	429c      	cmp	r4, r3
 8000a0e:	bf08      	it	eq
 8000a10:	68ec      	ldreq	r4, [r5, #12]
 8000a12:	e7e6      	b.n	80009e2 <__swsetup_r+0x1e>
 8000a14:	0751      	lsls	r1, r2, #29
 8000a16:	d512      	bpl.n	8000a3e <__swsetup_r+0x7a>
 8000a18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000a1a:	b141      	cbz	r1, 8000a2e <__swsetup_r+0x6a>
 8000a1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000a20:	4299      	cmp	r1, r3
 8000a22:	d002      	beq.n	8000a2a <__swsetup_r+0x66>
 8000a24:	4630      	mov	r0, r6
 8000a26:	f000 fa19 	bl	8000e5c <_free_r>
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	6363      	str	r3, [r4, #52]	; 0x34
 8000a2e:	89a3      	ldrh	r3, [r4, #12]
 8000a30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000a34:	81a3      	strh	r3, [r4, #12]
 8000a36:	2300      	movs	r3, #0
 8000a38:	6063      	str	r3, [r4, #4]
 8000a3a:	6923      	ldr	r3, [r4, #16]
 8000a3c:	6023      	str	r3, [r4, #0]
 8000a3e:	89a3      	ldrh	r3, [r4, #12]
 8000a40:	f043 0308 	orr.w	r3, r3, #8
 8000a44:	81a3      	strh	r3, [r4, #12]
 8000a46:	6923      	ldr	r3, [r4, #16]
 8000a48:	b94b      	cbnz	r3, 8000a5e <__swsetup_r+0x9a>
 8000a4a:	89a3      	ldrh	r3, [r4, #12]
 8000a4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000a50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a54:	d003      	beq.n	8000a5e <__swsetup_r+0x9a>
 8000a56:	4621      	mov	r1, r4
 8000a58:	4630      	mov	r0, r6
 8000a5a:	f000 f9bf 	bl	8000ddc <__smakebuf_r>
 8000a5e:	89a2      	ldrh	r2, [r4, #12]
 8000a60:	f012 0301 	ands.w	r3, r2, #1
 8000a64:	d00c      	beq.n	8000a80 <__swsetup_r+0xbc>
 8000a66:	2300      	movs	r3, #0
 8000a68:	60a3      	str	r3, [r4, #8]
 8000a6a:	6963      	ldr	r3, [r4, #20]
 8000a6c:	425b      	negs	r3, r3
 8000a6e:	61a3      	str	r3, [r4, #24]
 8000a70:	6923      	ldr	r3, [r4, #16]
 8000a72:	b953      	cbnz	r3, 8000a8a <__swsetup_r+0xc6>
 8000a74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a78:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8000a7c:	d1ba      	bne.n	80009f4 <__swsetup_r+0x30>
 8000a7e:	bd70      	pop	{r4, r5, r6, pc}
 8000a80:	0792      	lsls	r2, r2, #30
 8000a82:	bf58      	it	pl
 8000a84:	6963      	ldrpl	r3, [r4, #20]
 8000a86:	60a3      	str	r3, [r4, #8]
 8000a88:	e7f2      	b.n	8000a70 <__swsetup_r+0xac>
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	e7f7      	b.n	8000a7e <__swsetup_r+0xba>
 8000a8e:	bf00      	nop
 8000a90:	20000004 	.word	0x20000004
 8000a94:	080011b8 	.word	0x080011b8
 8000a98:	080011d8 	.word	0x080011d8
 8000a9c:	08001198 	.word	0x08001198

08000aa0 <__sflush_r>:
 8000aa0:	898a      	ldrh	r2, [r1, #12]
 8000aa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000aa6:	4605      	mov	r5, r0
 8000aa8:	0710      	lsls	r0, r2, #28
 8000aaa:	460c      	mov	r4, r1
 8000aac:	d458      	bmi.n	8000b60 <__sflush_r+0xc0>
 8000aae:	684b      	ldr	r3, [r1, #4]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	dc05      	bgt.n	8000ac0 <__sflush_r+0x20>
 8000ab4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	dc02      	bgt.n	8000ac0 <__sflush_r+0x20>
 8000aba:	2000      	movs	r0, #0
 8000abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ac0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000ac2:	2e00      	cmp	r6, #0
 8000ac4:	d0f9      	beq.n	8000aba <__sflush_r+0x1a>
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000acc:	682f      	ldr	r7, [r5, #0]
 8000ace:	6a21      	ldr	r1, [r4, #32]
 8000ad0:	602b      	str	r3, [r5, #0]
 8000ad2:	d032      	beq.n	8000b3a <__sflush_r+0x9a>
 8000ad4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000ad6:	89a3      	ldrh	r3, [r4, #12]
 8000ad8:	075a      	lsls	r2, r3, #29
 8000ada:	d505      	bpl.n	8000ae8 <__sflush_r+0x48>
 8000adc:	6863      	ldr	r3, [r4, #4]
 8000ade:	1ac0      	subs	r0, r0, r3
 8000ae0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000ae2:	b10b      	cbz	r3, 8000ae8 <__sflush_r+0x48>
 8000ae4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ae6:	1ac0      	subs	r0, r0, r3
 8000ae8:	2300      	movs	r3, #0
 8000aea:	4602      	mov	r2, r0
 8000aec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000aee:	6a21      	ldr	r1, [r4, #32]
 8000af0:	4628      	mov	r0, r5
 8000af2:	47b0      	blx	r6
 8000af4:	1c43      	adds	r3, r0, #1
 8000af6:	89a3      	ldrh	r3, [r4, #12]
 8000af8:	d106      	bne.n	8000b08 <__sflush_r+0x68>
 8000afa:	6829      	ldr	r1, [r5, #0]
 8000afc:	291d      	cmp	r1, #29
 8000afe:	d848      	bhi.n	8000b92 <__sflush_r+0xf2>
 8000b00:	4a29      	ldr	r2, [pc, #164]	; (8000ba8 <__sflush_r+0x108>)
 8000b02:	40ca      	lsrs	r2, r1
 8000b04:	07d6      	lsls	r6, r2, #31
 8000b06:	d544      	bpl.n	8000b92 <__sflush_r+0xf2>
 8000b08:	2200      	movs	r2, #0
 8000b0a:	6062      	str	r2, [r4, #4]
 8000b0c:	04d9      	lsls	r1, r3, #19
 8000b0e:	6922      	ldr	r2, [r4, #16]
 8000b10:	6022      	str	r2, [r4, #0]
 8000b12:	d504      	bpl.n	8000b1e <__sflush_r+0x7e>
 8000b14:	1c42      	adds	r2, r0, #1
 8000b16:	d101      	bne.n	8000b1c <__sflush_r+0x7c>
 8000b18:	682b      	ldr	r3, [r5, #0]
 8000b1a:	b903      	cbnz	r3, 8000b1e <__sflush_r+0x7e>
 8000b1c:	6560      	str	r0, [r4, #84]	; 0x54
 8000b1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000b20:	602f      	str	r7, [r5, #0]
 8000b22:	2900      	cmp	r1, #0
 8000b24:	d0c9      	beq.n	8000aba <__sflush_r+0x1a>
 8000b26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000b2a:	4299      	cmp	r1, r3
 8000b2c:	d002      	beq.n	8000b34 <__sflush_r+0x94>
 8000b2e:	4628      	mov	r0, r5
 8000b30:	f000 f994 	bl	8000e5c <_free_r>
 8000b34:	2000      	movs	r0, #0
 8000b36:	6360      	str	r0, [r4, #52]	; 0x34
 8000b38:	e7c0      	b.n	8000abc <__sflush_r+0x1c>
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	4628      	mov	r0, r5
 8000b3e:	47b0      	blx	r6
 8000b40:	1c41      	adds	r1, r0, #1
 8000b42:	d1c8      	bne.n	8000ad6 <__sflush_r+0x36>
 8000b44:	682b      	ldr	r3, [r5, #0]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d0c5      	beq.n	8000ad6 <__sflush_r+0x36>
 8000b4a:	2b1d      	cmp	r3, #29
 8000b4c:	d001      	beq.n	8000b52 <__sflush_r+0xb2>
 8000b4e:	2b16      	cmp	r3, #22
 8000b50:	d101      	bne.n	8000b56 <__sflush_r+0xb6>
 8000b52:	602f      	str	r7, [r5, #0]
 8000b54:	e7b1      	b.n	8000aba <__sflush_r+0x1a>
 8000b56:	89a3      	ldrh	r3, [r4, #12]
 8000b58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b5c:	81a3      	strh	r3, [r4, #12]
 8000b5e:	e7ad      	b.n	8000abc <__sflush_r+0x1c>
 8000b60:	690f      	ldr	r7, [r1, #16]
 8000b62:	2f00      	cmp	r7, #0
 8000b64:	d0a9      	beq.n	8000aba <__sflush_r+0x1a>
 8000b66:	0793      	lsls	r3, r2, #30
 8000b68:	680e      	ldr	r6, [r1, #0]
 8000b6a:	bf08      	it	eq
 8000b6c:	694b      	ldreq	r3, [r1, #20]
 8000b6e:	600f      	str	r7, [r1, #0]
 8000b70:	bf18      	it	ne
 8000b72:	2300      	movne	r3, #0
 8000b74:	eba6 0807 	sub.w	r8, r6, r7
 8000b78:	608b      	str	r3, [r1, #8]
 8000b7a:	f1b8 0f00 	cmp.w	r8, #0
 8000b7e:	dd9c      	ble.n	8000aba <__sflush_r+0x1a>
 8000b80:	4643      	mov	r3, r8
 8000b82:	463a      	mov	r2, r7
 8000b84:	6a21      	ldr	r1, [r4, #32]
 8000b86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000b88:	4628      	mov	r0, r5
 8000b8a:	47b0      	blx	r6
 8000b8c:	2800      	cmp	r0, #0
 8000b8e:	dc06      	bgt.n	8000b9e <__sflush_r+0xfe>
 8000b90:	89a3      	ldrh	r3, [r4, #12]
 8000b92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b96:	81a3      	strh	r3, [r4, #12]
 8000b98:	f04f 30ff 	mov.w	r0, #4294967295
 8000b9c:	e78e      	b.n	8000abc <__sflush_r+0x1c>
 8000b9e:	4407      	add	r7, r0
 8000ba0:	eba8 0800 	sub.w	r8, r8, r0
 8000ba4:	e7e9      	b.n	8000b7a <__sflush_r+0xda>
 8000ba6:	bf00      	nop
 8000ba8:	20400001 	.word	0x20400001

08000bac <_fflush_r>:
 8000bac:	b538      	push	{r3, r4, r5, lr}
 8000bae:	690b      	ldr	r3, [r1, #16]
 8000bb0:	4605      	mov	r5, r0
 8000bb2:	460c      	mov	r4, r1
 8000bb4:	b1db      	cbz	r3, 8000bee <_fflush_r+0x42>
 8000bb6:	b118      	cbz	r0, 8000bc0 <_fflush_r+0x14>
 8000bb8:	6983      	ldr	r3, [r0, #24]
 8000bba:	b90b      	cbnz	r3, 8000bc0 <_fflush_r+0x14>
 8000bbc:	f000 f860 	bl	8000c80 <__sinit>
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <_fflush_r+0x48>)
 8000bc2:	429c      	cmp	r4, r3
 8000bc4:	d109      	bne.n	8000bda <_fflush_r+0x2e>
 8000bc6:	686c      	ldr	r4, [r5, #4]
 8000bc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000bcc:	b17b      	cbz	r3, 8000bee <_fflush_r+0x42>
 8000bce:	4621      	mov	r1, r4
 8000bd0:	4628      	mov	r0, r5
 8000bd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000bd6:	f7ff bf63 	b.w	8000aa0 <__sflush_r>
 8000bda:	4b07      	ldr	r3, [pc, #28]	; (8000bf8 <_fflush_r+0x4c>)
 8000bdc:	429c      	cmp	r4, r3
 8000bde:	d101      	bne.n	8000be4 <_fflush_r+0x38>
 8000be0:	68ac      	ldr	r4, [r5, #8]
 8000be2:	e7f1      	b.n	8000bc8 <_fflush_r+0x1c>
 8000be4:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <_fflush_r+0x50>)
 8000be6:	429c      	cmp	r4, r3
 8000be8:	bf08      	it	eq
 8000bea:	68ec      	ldreq	r4, [r5, #12]
 8000bec:	e7ec      	b.n	8000bc8 <_fflush_r+0x1c>
 8000bee:	2000      	movs	r0, #0
 8000bf0:	bd38      	pop	{r3, r4, r5, pc}
 8000bf2:	bf00      	nop
 8000bf4:	080011b8 	.word	0x080011b8
 8000bf8:	080011d8 	.word	0x080011d8
 8000bfc:	08001198 	.word	0x08001198

08000c00 <std>:
 8000c00:	2300      	movs	r3, #0
 8000c02:	b510      	push	{r4, lr}
 8000c04:	4604      	mov	r4, r0
 8000c06:	e9c0 3300 	strd	r3, r3, [r0]
 8000c0a:	6083      	str	r3, [r0, #8]
 8000c0c:	8181      	strh	r1, [r0, #12]
 8000c0e:	6643      	str	r3, [r0, #100]	; 0x64
 8000c10:	81c2      	strh	r2, [r0, #14]
 8000c12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000c16:	6183      	str	r3, [r0, #24]
 8000c18:	4619      	mov	r1, r3
 8000c1a:	2208      	movs	r2, #8
 8000c1c:	305c      	adds	r0, #92	; 0x5c
 8000c1e:	f7ff fe13 	bl	8000848 <memset>
 8000c22:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <std+0x38>)
 8000c24:	6263      	str	r3, [r4, #36]	; 0x24
 8000c26:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <std+0x3c>)
 8000c28:	62a3      	str	r3, [r4, #40]	; 0x28
 8000c2a:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <std+0x40>)
 8000c2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000c2e:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <std+0x44>)
 8000c30:	6224      	str	r4, [r4, #32]
 8000c32:	6323      	str	r3, [r4, #48]	; 0x30
 8000c34:	bd10      	pop	{r4, pc}
 8000c36:	bf00      	nop
 8000c38:	08000fcd 	.word	0x08000fcd
 8000c3c:	08000fef 	.word	0x08000fef
 8000c40:	08001027 	.word	0x08001027
 8000c44:	0800104b 	.word	0x0800104b

08000c48 <_cleanup_r>:
 8000c48:	4901      	ldr	r1, [pc, #4]	; (8000c50 <_cleanup_r+0x8>)
 8000c4a:	f000 b885 	b.w	8000d58 <_fwalk_reent>
 8000c4e:	bf00      	nop
 8000c50:	08000bad 	.word	0x08000bad

08000c54 <__sfmoreglue>:
 8000c54:	b570      	push	{r4, r5, r6, lr}
 8000c56:	1e4a      	subs	r2, r1, #1
 8000c58:	2568      	movs	r5, #104	; 0x68
 8000c5a:	4355      	muls	r5, r2
 8000c5c:	460e      	mov	r6, r1
 8000c5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000c62:	f000 f949 	bl	8000ef8 <_malloc_r>
 8000c66:	4604      	mov	r4, r0
 8000c68:	b140      	cbz	r0, 8000c7c <__sfmoreglue+0x28>
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	e9c0 1600 	strd	r1, r6, [r0]
 8000c70:	300c      	adds	r0, #12
 8000c72:	60a0      	str	r0, [r4, #8]
 8000c74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000c78:	f7ff fde6 	bl	8000848 <memset>
 8000c7c:	4620      	mov	r0, r4
 8000c7e:	bd70      	pop	{r4, r5, r6, pc}

08000c80 <__sinit>:
 8000c80:	6983      	ldr	r3, [r0, #24]
 8000c82:	b510      	push	{r4, lr}
 8000c84:	4604      	mov	r4, r0
 8000c86:	bb33      	cbnz	r3, 8000cd6 <__sinit+0x56>
 8000c88:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8000c8c:	6503      	str	r3, [r0, #80]	; 0x50
 8000c8e:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <__sinit+0x58>)
 8000c90:	4a12      	ldr	r2, [pc, #72]	; (8000cdc <__sinit+0x5c>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	6282      	str	r2, [r0, #40]	; 0x28
 8000c96:	4298      	cmp	r0, r3
 8000c98:	bf04      	itt	eq
 8000c9a:	2301      	moveq	r3, #1
 8000c9c:	6183      	streq	r3, [r0, #24]
 8000c9e:	f000 f81f 	bl	8000ce0 <__sfp>
 8000ca2:	6060      	str	r0, [r4, #4]
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f000 f81b 	bl	8000ce0 <__sfp>
 8000caa:	60a0      	str	r0, [r4, #8]
 8000cac:	4620      	mov	r0, r4
 8000cae:	f000 f817 	bl	8000ce0 <__sfp>
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	60e0      	str	r0, [r4, #12]
 8000cb6:	2104      	movs	r1, #4
 8000cb8:	6860      	ldr	r0, [r4, #4]
 8000cba:	f7ff ffa1 	bl	8000c00 <std>
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	2109      	movs	r1, #9
 8000cc2:	68a0      	ldr	r0, [r4, #8]
 8000cc4:	f7ff ff9c 	bl	8000c00 <std>
 8000cc8:	2202      	movs	r2, #2
 8000cca:	2112      	movs	r1, #18
 8000ccc:	68e0      	ldr	r0, [r4, #12]
 8000cce:	f7ff ff97 	bl	8000c00 <std>
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	61a3      	str	r3, [r4, #24]
 8000cd6:	bd10      	pop	{r4, pc}
 8000cd8:	08001194 	.word	0x08001194
 8000cdc:	08000c49 	.word	0x08000c49

08000ce0 <__sfp>:
 8000ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ce2:	4b1b      	ldr	r3, [pc, #108]	; (8000d50 <__sfp+0x70>)
 8000ce4:	681e      	ldr	r6, [r3, #0]
 8000ce6:	69b3      	ldr	r3, [r6, #24]
 8000ce8:	4607      	mov	r7, r0
 8000cea:	b913      	cbnz	r3, 8000cf2 <__sfp+0x12>
 8000cec:	4630      	mov	r0, r6
 8000cee:	f7ff ffc7 	bl	8000c80 <__sinit>
 8000cf2:	3648      	adds	r6, #72	; 0x48
 8000cf4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000cf8:	3b01      	subs	r3, #1
 8000cfa:	d503      	bpl.n	8000d04 <__sfp+0x24>
 8000cfc:	6833      	ldr	r3, [r6, #0]
 8000cfe:	b133      	cbz	r3, 8000d0e <__sfp+0x2e>
 8000d00:	6836      	ldr	r6, [r6, #0]
 8000d02:	e7f7      	b.n	8000cf4 <__sfp+0x14>
 8000d04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000d08:	b16d      	cbz	r5, 8000d26 <__sfp+0x46>
 8000d0a:	3468      	adds	r4, #104	; 0x68
 8000d0c:	e7f4      	b.n	8000cf8 <__sfp+0x18>
 8000d0e:	2104      	movs	r1, #4
 8000d10:	4638      	mov	r0, r7
 8000d12:	f7ff ff9f 	bl	8000c54 <__sfmoreglue>
 8000d16:	6030      	str	r0, [r6, #0]
 8000d18:	2800      	cmp	r0, #0
 8000d1a:	d1f1      	bne.n	8000d00 <__sfp+0x20>
 8000d1c:	230c      	movs	r3, #12
 8000d1e:	603b      	str	r3, [r7, #0]
 8000d20:	4604      	mov	r4, r0
 8000d22:	4620      	mov	r0, r4
 8000d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d26:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <__sfp+0x74>)
 8000d28:	6665      	str	r5, [r4, #100]	; 0x64
 8000d2a:	e9c4 5500 	strd	r5, r5, [r4]
 8000d2e:	60a5      	str	r5, [r4, #8]
 8000d30:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8000d34:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8000d38:	2208      	movs	r2, #8
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000d40:	f7ff fd82 	bl	8000848 <memset>
 8000d44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000d48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000d4c:	e7e9      	b.n	8000d22 <__sfp+0x42>
 8000d4e:	bf00      	nop
 8000d50:	08001194 	.word	0x08001194
 8000d54:	ffff0001 	.word	0xffff0001

08000d58 <_fwalk_reent>:
 8000d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000d5c:	4680      	mov	r8, r0
 8000d5e:	4689      	mov	r9, r1
 8000d60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000d64:	2600      	movs	r6, #0
 8000d66:	b914      	cbnz	r4, 8000d6e <_fwalk_reent+0x16>
 8000d68:	4630      	mov	r0, r6
 8000d6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000d6e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8000d72:	3f01      	subs	r7, #1
 8000d74:	d501      	bpl.n	8000d7a <_fwalk_reent+0x22>
 8000d76:	6824      	ldr	r4, [r4, #0]
 8000d78:	e7f5      	b.n	8000d66 <_fwalk_reent+0xe>
 8000d7a:	89ab      	ldrh	r3, [r5, #12]
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d907      	bls.n	8000d90 <_fwalk_reent+0x38>
 8000d80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000d84:	3301      	adds	r3, #1
 8000d86:	d003      	beq.n	8000d90 <_fwalk_reent+0x38>
 8000d88:	4629      	mov	r1, r5
 8000d8a:	4640      	mov	r0, r8
 8000d8c:	47c8      	blx	r9
 8000d8e:	4306      	orrs	r6, r0
 8000d90:	3568      	adds	r5, #104	; 0x68
 8000d92:	e7ee      	b.n	8000d72 <_fwalk_reent+0x1a>

08000d94 <__swhatbuf_r>:
 8000d94:	b570      	push	{r4, r5, r6, lr}
 8000d96:	460e      	mov	r6, r1
 8000d98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d9c:	2900      	cmp	r1, #0
 8000d9e:	b096      	sub	sp, #88	; 0x58
 8000da0:	4614      	mov	r4, r2
 8000da2:	461d      	mov	r5, r3
 8000da4:	da07      	bge.n	8000db6 <__swhatbuf_r+0x22>
 8000da6:	2300      	movs	r3, #0
 8000da8:	602b      	str	r3, [r5, #0]
 8000daa:	89b3      	ldrh	r3, [r6, #12]
 8000dac:	061a      	lsls	r2, r3, #24
 8000dae:	d410      	bmi.n	8000dd2 <__swhatbuf_r+0x3e>
 8000db0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000db4:	e00e      	b.n	8000dd4 <__swhatbuf_r+0x40>
 8000db6:	466a      	mov	r2, sp
 8000db8:	f000 f96e 	bl	8001098 <_fstat_r>
 8000dbc:	2800      	cmp	r0, #0
 8000dbe:	dbf2      	blt.n	8000da6 <__swhatbuf_r+0x12>
 8000dc0:	9a01      	ldr	r2, [sp, #4]
 8000dc2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000dc6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000dca:	425a      	negs	r2, r3
 8000dcc:	415a      	adcs	r2, r3
 8000dce:	602a      	str	r2, [r5, #0]
 8000dd0:	e7ee      	b.n	8000db0 <__swhatbuf_r+0x1c>
 8000dd2:	2340      	movs	r3, #64	; 0x40
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	6023      	str	r3, [r4, #0]
 8000dd8:	b016      	add	sp, #88	; 0x58
 8000dda:	bd70      	pop	{r4, r5, r6, pc}

08000ddc <__smakebuf_r>:
 8000ddc:	898b      	ldrh	r3, [r1, #12]
 8000dde:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000de0:	079d      	lsls	r5, r3, #30
 8000de2:	4606      	mov	r6, r0
 8000de4:	460c      	mov	r4, r1
 8000de6:	d507      	bpl.n	8000df8 <__smakebuf_r+0x1c>
 8000de8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000dec:	6023      	str	r3, [r4, #0]
 8000dee:	6123      	str	r3, [r4, #16]
 8000df0:	2301      	movs	r3, #1
 8000df2:	6163      	str	r3, [r4, #20]
 8000df4:	b002      	add	sp, #8
 8000df6:	bd70      	pop	{r4, r5, r6, pc}
 8000df8:	ab01      	add	r3, sp, #4
 8000dfa:	466a      	mov	r2, sp
 8000dfc:	f7ff ffca 	bl	8000d94 <__swhatbuf_r>
 8000e00:	9900      	ldr	r1, [sp, #0]
 8000e02:	4605      	mov	r5, r0
 8000e04:	4630      	mov	r0, r6
 8000e06:	f000 f877 	bl	8000ef8 <_malloc_r>
 8000e0a:	b948      	cbnz	r0, 8000e20 <__smakebuf_r+0x44>
 8000e0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e10:	059a      	lsls	r2, r3, #22
 8000e12:	d4ef      	bmi.n	8000df4 <__smakebuf_r+0x18>
 8000e14:	f023 0303 	bic.w	r3, r3, #3
 8000e18:	f043 0302 	orr.w	r3, r3, #2
 8000e1c:	81a3      	strh	r3, [r4, #12]
 8000e1e:	e7e3      	b.n	8000de8 <__smakebuf_r+0xc>
 8000e20:	4b0d      	ldr	r3, [pc, #52]	; (8000e58 <__smakebuf_r+0x7c>)
 8000e22:	62b3      	str	r3, [r6, #40]	; 0x28
 8000e24:	89a3      	ldrh	r3, [r4, #12]
 8000e26:	6020      	str	r0, [r4, #0]
 8000e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e2c:	81a3      	strh	r3, [r4, #12]
 8000e2e:	9b00      	ldr	r3, [sp, #0]
 8000e30:	6163      	str	r3, [r4, #20]
 8000e32:	9b01      	ldr	r3, [sp, #4]
 8000e34:	6120      	str	r0, [r4, #16]
 8000e36:	b15b      	cbz	r3, 8000e50 <__smakebuf_r+0x74>
 8000e38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e3c:	4630      	mov	r0, r6
 8000e3e:	f000 f93d 	bl	80010bc <_isatty_r>
 8000e42:	b128      	cbz	r0, 8000e50 <__smakebuf_r+0x74>
 8000e44:	89a3      	ldrh	r3, [r4, #12]
 8000e46:	f023 0303 	bic.w	r3, r3, #3
 8000e4a:	f043 0301 	orr.w	r3, r3, #1
 8000e4e:	81a3      	strh	r3, [r4, #12]
 8000e50:	89a3      	ldrh	r3, [r4, #12]
 8000e52:	431d      	orrs	r5, r3
 8000e54:	81a5      	strh	r5, [r4, #12]
 8000e56:	e7cd      	b.n	8000df4 <__smakebuf_r+0x18>
 8000e58:	08000c49 	.word	0x08000c49

08000e5c <_free_r>:
 8000e5c:	b538      	push	{r3, r4, r5, lr}
 8000e5e:	4605      	mov	r5, r0
 8000e60:	2900      	cmp	r1, #0
 8000e62:	d045      	beq.n	8000ef0 <_free_r+0x94>
 8000e64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000e68:	1f0c      	subs	r4, r1, #4
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	bfb8      	it	lt
 8000e6e:	18e4      	addlt	r4, r4, r3
 8000e70:	f000 f946 	bl	8001100 <__malloc_lock>
 8000e74:	4a1f      	ldr	r2, [pc, #124]	; (8000ef4 <_free_r+0x98>)
 8000e76:	6813      	ldr	r3, [r2, #0]
 8000e78:	4610      	mov	r0, r2
 8000e7a:	b933      	cbnz	r3, 8000e8a <_free_r+0x2e>
 8000e7c:	6063      	str	r3, [r4, #4]
 8000e7e:	6014      	str	r4, [r2, #0]
 8000e80:	4628      	mov	r0, r5
 8000e82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e86:	f000 b93c 	b.w	8001102 <__malloc_unlock>
 8000e8a:	42a3      	cmp	r3, r4
 8000e8c:	d90c      	bls.n	8000ea8 <_free_r+0x4c>
 8000e8e:	6821      	ldr	r1, [r4, #0]
 8000e90:	1862      	adds	r2, r4, r1
 8000e92:	4293      	cmp	r3, r2
 8000e94:	bf04      	itt	eq
 8000e96:	681a      	ldreq	r2, [r3, #0]
 8000e98:	685b      	ldreq	r3, [r3, #4]
 8000e9a:	6063      	str	r3, [r4, #4]
 8000e9c:	bf04      	itt	eq
 8000e9e:	1852      	addeq	r2, r2, r1
 8000ea0:	6022      	streq	r2, [r4, #0]
 8000ea2:	6004      	str	r4, [r0, #0]
 8000ea4:	e7ec      	b.n	8000e80 <_free_r+0x24>
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	685a      	ldr	r2, [r3, #4]
 8000eaa:	b10a      	cbz	r2, 8000eb0 <_free_r+0x54>
 8000eac:	42a2      	cmp	r2, r4
 8000eae:	d9fa      	bls.n	8000ea6 <_free_r+0x4a>
 8000eb0:	6819      	ldr	r1, [r3, #0]
 8000eb2:	1858      	adds	r0, r3, r1
 8000eb4:	42a0      	cmp	r0, r4
 8000eb6:	d10b      	bne.n	8000ed0 <_free_r+0x74>
 8000eb8:	6820      	ldr	r0, [r4, #0]
 8000eba:	4401      	add	r1, r0
 8000ebc:	1858      	adds	r0, r3, r1
 8000ebe:	4282      	cmp	r2, r0
 8000ec0:	6019      	str	r1, [r3, #0]
 8000ec2:	d1dd      	bne.n	8000e80 <_free_r+0x24>
 8000ec4:	6810      	ldr	r0, [r2, #0]
 8000ec6:	6852      	ldr	r2, [r2, #4]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	4401      	add	r1, r0
 8000ecc:	6019      	str	r1, [r3, #0]
 8000ece:	e7d7      	b.n	8000e80 <_free_r+0x24>
 8000ed0:	d902      	bls.n	8000ed8 <_free_r+0x7c>
 8000ed2:	230c      	movs	r3, #12
 8000ed4:	602b      	str	r3, [r5, #0]
 8000ed6:	e7d3      	b.n	8000e80 <_free_r+0x24>
 8000ed8:	6820      	ldr	r0, [r4, #0]
 8000eda:	1821      	adds	r1, r4, r0
 8000edc:	428a      	cmp	r2, r1
 8000ede:	bf04      	itt	eq
 8000ee0:	6811      	ldreq	r1, [r2, #0]
 8000ee2:	6852      	ldreq	r2, [r2, #4]
 8000ee4:	6062      	str	r2, [r4, #4]
 8000ee6:	bf04      	itt	eq
 8000ee8:	1809      	addeq	r1, r1, r0
 8000eea:	6021      	streq	r1, [r4, #0]
 8000eec:	605c      	str	r4, [r3, #4]
 8000eee:	e7c7      	b.n	8000e80 <_free_r+0x24>
 8000ef0:	bd38      	pop	{r3, r4, r5, pc}
 8000ef2:	bf00      	nop
 8000ef4:	2000008c 	.word	0x2000008c

08000ef8 <_malloc_r>:
 8000ef8:	b570      	push	{r4, r5, r6, lr}
 8000efa:	1ccd      	adds	r5, r1, #3
 8000efc:	f025 0503 	bic.w	r5, r5, #3
 8000f00:	3508      	adds	r5, #8
 8000f02:	2d0c      	cmp	r5, #12
 8000f04:	bf38      	it	cc
 8000f06:	250c      	movcc	r5, #12
 8000f08:	2d00      	cmp	r5, #0
 8000f0a:	4606      	mov	r6, r0
 8000f0c:	db01      	blt.n	8000f12 <_malloc_r+0x1a>
 8000f0e:	42a9      	cmp	r1, r5
 8000f10:	d903      	bls.n	8000f1a <_malloc_r+0x22>
 8000f12:	230c      	movs	r3, #12
 8000f14:	6033      	str	r3, [r6, #0]
 8000f16:	2000      	movs	r0, #0
 8000f18:	bd70      	pop	{r4, r5, r6, pc}
 8000f1a:	f000 f8f1 	bl	8001100 <__malloc_lock>
 8000f1e:	4a21      	ldr	r2, [pc, #132]	; (8000fa4 <_malloc_r+0xac>)
 8000f20:	6814      	ldr	r4, [r2, #0]
 8000f22:	4621      	mov	r1, r4
 8000f24:	b991      	cbnz	r1, 8000f4c <_malloc_r+0x54>
 8000f26:	4c20      	ldr	r4, [pc, #128]	; (8000fa8 <_malloc_r+0xb0>)
 8000f28:	6823      	ldr	r3, [r4, #0]
 8000f2a:	b91b      	cbnz	r3, 8000f34 <_malloc_r+0x3c>
 8000f2c:	4630      	mov	r0, r6
 8000f2e:	f000 f83d 	bl	8000fac <_sbrk_r>
 8000f32:	6020      	str	r0, [r4, #0]
 8000f34:	4629      	mov	r1, r5
 8000f36:	4630      	mov	r0, r6
 8000f38:	f000 f838 	bl	8000fac <_sbrk_r>
 8000f3c:	1c43      	adds	r3, r0, #1
 8000f3e:	d124      	bne.n	8000f8a <_malloc_r+0x92>
 8000f40:	230c      	movs	r3, #12
 8000f42:	6033      	str	r3, [r6, #0]
 8000f44:	4630      	mov	r0, r6
 8000f46:	f000 f8dc 	bl	8001102 <__malloc_unlock>
 8000f4a:	e7e4      	b.n	8000f16 <_malloc_r+0x1e>
 8000f4c:	680b      	ldr	r3, [r1, #0]
 8000f4e:	1b5b      	subs	r3, r3, r5
 8000f50:	d418      	bmi.n	8000f84 <_malloc_r+0x8c>
 8000f52:	2b0b      	cmp	r3, #11
 8000f54:	d90f      	bls.n	8000f76 <_malloc_r+0x7e>
 8000f56:	600b      	str	r3, [r1, #0]
 8000f58:	50cd      	str	r5, [r1, r3]
 8000f5a:	18cc      	adds	r4, r1, r3
 8000f5c:	4630      	mov	r0, r6
 8000f5e:	f000 f8d0 	bl	8001102 <__malloc_unlock>
 8000f62:	f104 000b 	add.w	r0, r4, #11
 8000f66:	1d23      	adds	r3, r4, #4
 8000f68:	f020 0007 	bic.w	r0, r0, #7
 8000f6c:	1ac3      	subs	r3, r0, r3
 8000f6e:	d0d3      	beq.n	8000f18 <_malloc_r+0x20>
 8000f70:	425a      	negs	r2, r3
 8000f72:	50e2      	str	r2, [r4, r3]
 8000f74:	e7d0      	b.n	8000f18 <_malloc_r+0x20>
 8000f76:	428c      	cmp	r4, r1
 8000f78:	684b      	ldr	r3, [r1, #4]
 8000f7a:	bf16      	itet	ne
 8000f7c:	6063      	strne	r3, [r4, #4]
 8000f7e:	6013      	streq	r3, [r2, #0]
 8000f80:	460c      	movne	r4, r1
 8000f82:	e7eb      	b.n	8000f5c <_malloc_r+0x64>
 8000f84:	460c      	mov	r4, r1
 8000f86:	6849      	ldr	r1, [r1, #4]
 8000f88:	e7cc      	b.n	8000f24 <_malloc_r+0x2c>
 8000f8a:	1cc4      	adds	r4, r0, #3
 8000f8c:	f024 0403 	bic.w	r4, r4, #3
 8000f90:	42a0      	cmp	r0, r4
 8000f92:	d005      	beq.n	8000fa0 <_malloc_r+0xa8>
 8000f94:	1a21      	subs	r1, r4, r0
 8000f96:	4630      	mov	r0, r6
 8000f98:	f000 f808 	bl	8000fac <_sbrk_r>
 8000f9c:	3001      	adds	r0, #1
 8000f9e:	d0cf      	beq.n	8000f40 <_malloc_r+0x48>
 8000fa0:	6025      	str	r5, [r4, #0]
 8000fa2:	e7db      	b.n	8000f5c <_malloc_r+0x64>
 8000fa4:	2000008c 	.word	0x2000008c
 8000fa8:	20000090 	.word	0x20000090

08000fac <_sbrk_r>:
 8000fac:	b538      	push	{r3, r4, r5, lr}
 8000fae:	4c06      	ldr	r4, [pc, #24]	; (8000fc8 <_sbrk_r+0x1c>)
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	4605      	mov	r5, r0
 8000fb4:	4608      	mov	r0, r1
 8000fb6:	6023      	str	r3, [r4, #0]
 8000fb8:	f7ff fbbc 	bl	8000734 <_sbrk>
 8000fbc:	1c43      	adds	r3, r0, #1
 8000fbe:	d102      	bne.n	8000fc6 <_sbrk_r+0x1a>
 8000fc0:	6823      	ldr	r3, [r4, #0]
 8000fc2:	b103      	cbz	r3, 8000fc6 <_sbrk_r+0x1a>
 8000fc4:	602b      	str	r3, [r5, #0]
 8000fc6:	bd38      	pop	{r3, r4, r5, pc}
 8000fc8:	200000d4 	.word	0x200000d4

08000fcc <__sread>:
 8000fcc:	b510      	push	{r4, lr}
 8000fce:	460c      	mov	r4, r1
 8000fd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fd4:	f000 f896 	bl	8001104 <_read_r>
 8000fd8:	2800      	cmp	r0, #0
 8000fda:	bfab      	itete	ge
 8000fdc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000fde:	89a3      	ldrhlt	r3, [r4, #12]
 8000fe0:	181b      	addge	r3, r3, r0
 8000fe2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000fe6:	bfac      	ite	ge
 8000fe8:	6563      	strge	r3, [r4, #84]	; 0x54
 8000fea:	81a3      	strhlt	r3, [r4, #12]
 8000fec:	bd10      	pop	{r4, pc}

08000fee <__swrite>:
 8000fee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ff2:	461f      	mov	r7, r3
 8000ff4:	898b      	ldrh	r3, [r1, #12]
 8000ff6:	05db      	lsls	r3, r3, #23
 8000ff8:	4605      	mov	r5, r0
 8000ffa:	460c      	mov	r4, r1
 8000ffc:	4616      	mov	r6, r2
 8000ffe:	d505      	bpl.n	800100c <__swrite+0x1e>
 8001000:	2302      	movs	r3, #2
 8001002:	2200      	movs	r2, #0
 8001004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001008:	f000 f868 	bl	80010dc <_lseek_r>
 800100c:	89a3      	ldrh	r3, [r4, #12]
 800100e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001012:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001016:	81a3      	strh	r3, [r4, #12]
 8001018:	4632      	mov	r2, r6
 800101a:	463b      	mov	r3, r7
 800101c:	4628      	mov	r0, r5
 800101e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001022:	f000 b817 	b.w	8001054 <_write_r>

08001026 <__sseek>:
 8001026:	b510      	push	{r4, lr}
 8001028:	460c      	mov	r4, r1
 800102a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800102e:	f000 f855 	bl	80010dc <_lseek_r>
 8001032:	1c43      	adds	r3, r0, #1
 8001034:	89a3      	ldrh	r3, [r4, #12]
 8001036:	bf15      	itete	ne
 8001038:	6560      	strne	r0, [r4, #84]	; 0x54
 800103a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800103e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001042:	81a3      	strheq	r3, [r4, #12]
 8001044:	bf18      	it	ne
 8001046:	81a3      	strhne	r3, [r4, #12]
 8001048:	bd10      	pop	{r4, pc}

0800104a <__sclose>:
 800104a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800104e:	f000 b813 	b.w	8001078 <_close_r>
	...

08001054 <_write_r>:
 8001054:	b538      	push	{r3, r4, r5, lr}
 8001056:	4c07      	ldr	r4, [pc, #28]	; (8001074 <_write_r+0x20>)
 8001058:	4605      	mov	r5, r0
 800105a:	4608      	mov	r0, r1
 800105c:	4611      	mov	r1, r2
 800105e:	2200      	movs	r2, #0
 8001060:	6022      	str	r2, [r4, #0]
 8001062:	461a      	mov	r2, r3
 8001064:	f7ff fb15 	bl	8000692 <_write>
 8001068:	1c43      	adds	r3, r0, #1
 800106a:	d102      	bne.n	8001072 <_write_r+0x1e>
 800106c:	6823      	ldr	r3, [r4, #0]
 800106e:	b103      	cbz	r3, 8001072 <_write_r+0x1e>
 8001070:	602b      	str	r3, [r5, #0]
 8001072:	bd38      	pop	{r3, r4, r5, pc}
 8001074:	200000d4 	.word	0x200000d4

08001078 <_close_r>:
 8001078:	b538      	push	{r3, r4, r5, lr}
 800107a:	4c06      	ldr	r4, [pc, #24]	; (8001094 <_close_r+0x1c>)
 800107c:	2300      	movs	r3, #0
 800107e:	4605      	mov	r5, r0
 8001080:	4608      	mov	r0, r1
 8001082:	6023      	str	r3, [r4, #0]
 8001084:	f7ff fb21 	bl	80006ca <_close>
 8001088:	1c43      	adds	r3, r0, #1
 800108a:	d102      	bne.n	8001092 <_close_r+0x1a>
 800108c:	6823      	ldr	r3, [r4, #0]
 800108e:	b103      	cbz	r3, 8001092 <_close_r+0x1a>
 8001090:	602b      	str	r3, [r5, #0]
 8001092:	bd38      	pop	{r3, r4, r5, pc}
 8001094:	200000d4 	.word	0x200000d4

08001098 <_fstat_r>:
 8001098:	b538      	push	{r3, r4, r5, lr}
 800109a:	4c07      	ldr	r4, [pc, #28]	; (80010b8 <_fstat_r+0x20>)
 800109c:	2300      	movs	r3, #0
 800109e:	4605      	mov	r5, r0
 80010a0:	4608      	mov	r0, r1
 80010a2:	4611      	mov	r1, r2
 80010a4:	6023      	str	r3, [r4, #0]
 80010a6:	f7ff fb1c 	bl	80006e2 <_fstat>
 80010aa:	1c43      	adds	r3, r0, #1
 80010ac:	d102      	bne.n	80010b4 <_fstat_r+0x1c>
 80010ae:	6823      	ldr	r3, [r4, #0]
 80010b0:	b103      	cbz	r3, 80010b4 <_fstat_r+0x1c>
 80010b2:	602b      	str	r3, [r5, #0]
 80010b4:	bd38      	pop	{r3, r4, r5, pc}
 80010b6:	bf00      	nop
 80010b8:	200000d4 	.word	0x200000d4

080010bc <_isatty_r>:
 80010bc:	b538      	push	{r3, r4, r5, lr}
 80010be:	4c06      	ldr	r4, [pc, #24]	; (80010d8 <_isatty_r+0x1c>)
 80010c0:	2300      	movs	r3, #0
 80010c2:	4605      	mov	r5, r0
 80010c4:	4608      	mov	r0, r1
 80010c6:	6023      	str	r3, [r4, #0]
 80010c8:	f7ff fb1b 	bl	8000702 <_isatty>
 80010cc:	1c43      	adds	r3, r0, #1
 80010ce:	d102      	bne.n	80010d6 <_isatty_r+0x1a>
 80010d0:	6823      	ldr	r3, [r4, #0]
 80010d2:	b103      	cbz	r3, 80010d6 <_isatty_r+0x1a>
 80010d4:	602b      	str	r3, [r5, #0]
 80010d6:	bd38      	pop	{r3, r4, r5, pc}
 80010d8:	200000d4 	.word	0x200000d4

080010dc <_lseek_r>:
 80010dc:	b538      	push	{r3, r4, r5, lr}
 80010de:	4c07      	ldr	r4, [pc, #28]	; (80010fc <_lseek_r+0x20>)
 80010e0:	4605      	mov	r5, r0
 80010e2:	4608      	mov	r0, r1
 80010e4:	4611      	mov	r1, r2
 80010e6:	2200      	movs	r2, #0
 80010e8:	6022      	str	r2, [r4, #0]
 80010ea:	461a      	mov	r2, r3
 80010ec:	f7ff fb14 	bl	8000718 <_lseek>
 80010f0:	1c43      	adds	r3, r0, #1
 80010f2:	d102      	bne.n	80010fa <_lseek_r+0x1e>
 80010f4:	6823      	ldr	r3, [r4, #0]
 80010f6:	b103      	cbz	r3, 80010fa <_lseek_r+0x1e>
 80010f8:	602b      	str	r3, [r5, #0]
 80010fa:	bd38      	pop	{r3, r4, r5, pc}
 80010fc:	200000d4 	.word	0x200000d4

08001100 <__malloc_lock>:
 8001100:	4770      	bx	lr

08001102 <__malloc_unlock>:
 8001102:	4770      	bx	lr

08001104 <_read_r>:
 8001104:	b538      	push	{r3, r4, r5, lr}
 8001106:	4c07      	ldr	r4, [pc, #28]	; (8001124 <_read_r+0x20>)
 8001108:	4605      	mov	r5, r0
 800110a:	4608      	mov	r0, r1
 800110c:	4611      	mov	r1, r2
 800110e:	2200      	movs	r2, #0
 8001110:	6022      	str	r2, [r4, #0]
 8001112:	461a      	mov	r2, r3
 8001114:	f7ff faa0 	bl	8000658 <_read>
 8001118:	1c43      	adds	r3, r0, #1
 800111a:	d102      	bne.n	8001122 <_read_r+0x1e>
 800111c:	6823      	ldr	r3, [r4, #0]
 800111e:	b103      	cbz	r3, 8001122 <_read_r+0x1e>
 8001120:	602b      	str	r3, [r5, #0]
 8001122:	bd38      	pop	{r3, r4, r5, pc}
 8001124:	200000d4 	.word	0x200000d4

08001128 <_init>:
 8001128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800112a:	bf00      	nop
 800112c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800112e:	bc08      	pop	{r3}
 8001130:	469e      	mov	lr, r3
 8001132:	4770      	bx	lr

08001134 <_fini>:
 8001134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001136:	bf00      	nop
 8001138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800113a:	bc08      	pop	{r3}
 800113c:	469e      	mov	lr, r3
 800113e:	4770      	bx	lr
