
task_scheduler_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010f8  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080012a0  080012a0  000112a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001358  08001358  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08001358  08001358  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001358  08001358  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001358  08001358  00011358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800135c  0800135c  0001135c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08001360  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  2000006c  080013cc  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  080013cc  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000025ec  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000078e  00000000  00000000  00022688  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001f8  00000000  00000000  00022e18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001b0  00000000  00000000  00023010  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002c19  00000000  00000000  000231c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001861  00000000  00000000  00025dd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00009583  00000000  00000000  0002763a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00030bbd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c4c  00000000  00000000  00030c38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08001288 	.word	0x08001288

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000070 	.word	0x20000070
 80001e4:	08001288 	.word	0x08001288

080001e8 <led_init_all>:
{
  for(uint32_t i = 0 ; i < count ; i++);
}

void led_init_all(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0

	uint32_t *pRccAhb1enr = (uint32_t*)0x40023830;
 80001ee:	4b19      	ldr	r3, [pc, #100]	; (8000254 <led_init_all+0x6c>)
 80001f0:	607b      	str	r3, [r7, #4]
	uint32_t *pGpiodModeReg = (uint32_t*)0x40020C00;
 80001f2:	4b19      	ldr	r3, [pc, #100]	; (8000258 <led_init_all+0x70>)
 80001f4:	603b      	str	r3, [r7, #0]


	*pRccAhb1enr |= ( 1 << 3);
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	f043 0208 	orr.w	r2, r3, #8
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	601a      	str	r2, [r3, #0]
	//configure LED_GREEN
	*pGpiodModeReg |= ( 1 << (2 * LED_GREEN));
 8000202:	683b      	ldr	r3, [r7, #0]
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800020a:	683b      	ldr	r3, [r7, #0]
 800020c:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_ORANGE));
 800020e:	683b      	ldr	r3, [r7, #0]
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8000216:	683b      	ldr	r3, [r7, #0]
 8000218:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_RED));
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_BLUE));
 8000226:	683b      	ldr	r3, [r7, #0]
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	601a      	str	r2, [r3, #0]
	*pGpioOpTypeReg |= ( 1 << (2 * LED_ORANGE));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_RED));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_BLUE));
#endif

    led_off(LED_GREEN);
 8000232:	200c      	movs	r0, #12
 8000234:	f000 f82a 	bl	800028c <led_off>
    led_off(LED_ORANGE);
 8000238:	200d      	movs	r0, #13
 800023a:	f000 f827 	bl	800028c <led_off>
    led_off(LED_RED);
 800023e:	200e      	movs	r0, #14
 8000240:	f000 f824 	bl	800028c <led_off>
    led_off(LED_BLUE);
 8000244:	200f      	movs	r0, #15
 8000246:	f000 f821 	bl	800028c <led_off>



}
 800024a:	bf00      	nop
 800024c:	3708      	adds	r7, #8
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	40023830 	.word	0x40023830
 8000258:	40020c00 	.word	0x40020c00

0800025c <led_on>:

void led_on(uint8_t led_no)
{
 800025c:	b480      	push	{r7}
 800025e:	b085      	sub	sp, #20
 8000260:	af00      	add	r7, sp, #0
 8000262:	4603      	mov	r3, r0
 8000264:	71fb      	strb	r3, [r7, #7]
  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 8000266:	4b08      	ldr	r3, [pc, #32]	; (8000288 <led_on+0x2c>)
 8000268:	60fb      	str	r3, [r7, #12]
  *pGpiodDataReg |= ( 1 << led_no);
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	79fa      	ldrb	r2, [r7, #7]
 8000270:	2101      	movs	r1, #1
 8000272:	fa01 f202 	lsl.w	r2, r1, r2
 8000276:	431a      	orrs	r2, r3
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	601a      	str	r2, [r3, #0]

}
 800027c:	bf00      	nop
 800027e:	3714      	adds	r7, #20
 8000280:	46bd      	mov	sp, r7
 8000282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000286:	4770      	bx	lr
 8000288:	40020c14 	.word	0x40020c14

0800028c <led_off>:

void led_off(uint8_t led_no)
{
 800028c:	b480      	push	{r7}
 800028e:	b085      	sub	sp, #20
 8000290:	af00      	add	r7, sp, #0
 8000292:	4603      	mov	r3, r0
 8000294:	71fb      	strb	r3, [r7, #7]
	  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 8000296:	4b09      	ldr	r3, [pc, #36]	; (80002bc <led_off+0x30>)
 8000298:	60fb      	str	r3, [r7, #12]
	  *pGpiodDataReg &= ~( 1 << led_no);
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	79fa      	ldrb	r2, [r7, #7]
 80002a0:	2101      	movs	r1, #1
 80002a2:	fa01 f202 	lsl.w	r2, r1, r2
 80002a6:	43d2      	mvns	r2, r2
 80002a8:	401a      	ands	r2, r3
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	601a      	str	r2, [r3, #0]

}
 80002ae:	bf00      	nop
 80002b0:	3714      	adds	r7, #20
 80002b2:	46bd      	mov	sp, r7
 80002b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	40020c14 	.word	0x40020c14

080002c0 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
    enable_processor_faults();
 80002c4:	f000 f99e 	bl	8000604 <enable_processor_faults>

	init_Scheduler_Stack(sched_stack_start);
 80002c8:	4807      	ldr	r0, [pc, #28]	; (80002e8 <main+0x28>)
 80002ca:	f000 f88b 	bl	80003e4 <init_Scheduler_Stack>


	init_Tasks_Stack();
 80002ce:	f000 f90b 	bl	80004e8 <init_Tasks_Stack>

	led_init_all();
 80002d2:	f7ff ff89 	bl	80001e8 <led_init_all>

	init_Systick(ticks);
 80002d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002da:	f000 f84b 	bl	8000374 <init_Systick>

	switch_sp_to_psp();
 80002de:	f000 f9dd 	bl	800069c <switch_sp_to_psp>

	task1_run();
 80002e2:	f000 f803 	bl	80002ec <task1_run>
	for(;;);
 80002e6:	e7fe      	b.n	80002e6 <main+0x26>
 80002e8:	2001ec00 	.word	0x2001ec00

080002ec <task1_run>:
}

void task1_run()
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_GREEN);
 80002f0:	200c      	movs	r0, #12
 80002f2:	f7ff ffb3 	bl	800025c <led_on>
		task_delay(1000);
 80002f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002fa:	f000 fa35 	bl	8000768 <task_delay>
		led_off(LED_GREEN);
 80002fe:	200c      	movs	r0, #12
 8000300:	f7ff ffc4 	bl	800028c <led_off>
		task_delay(1000);
 8000304:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000308:	f000 fa2e 	bl	8000768 <task_delay>
		led_on(LED_GREEN);
 800030c:	e7f0      	b.n	80002f0 <task1_run+0x4>

0800030e <task2_run>:
	}
}

void task2_run()
{
 800030e:	b580      	push	{r7, lr}
 8000310:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_ORANGE);
 8000312:	200d      	movs	r0, #13
 8000314:	f7ff ffa2 	bl	800025c <led_on>
		task_delay(500);
 8000318:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800031c:	f000 fa24 	bl	8000768 <task_delay>
		led_off(LED_ORANGE);
 8000320:	200d      	movs	r0, #13
 8000322:	f7ff ffb3 	bl	800028c <led_off>
		task_delay(500);
 8000326:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800032a:	f000 fa1d 	bl	8000768 <task_delay>
		led_on(LED_ORANGE);
 800032e:	e7f0      	b.n	8000312 <task2_run+0x4>

08000330 <task3_run>:
	}
}

void task3_run()
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_BLUE);
 8000334:	200f      	movs	r0, #15
 8000336:	f7ff ff91 	bl	800025c <led_on>
		task_delay(250);
 800033a:	20fa      	movs	r0, #250	; 0xfa
 800033c:	f000 fa14 	bl	8000768 <task_delay>
		led_off(LED_BLUE);
 8000340:	200f      	movs	r0, #15
 8000342:	f7ff ffa3 	bl	800028c <led_off>
		task_delay(250);
 8000346:	20fa      	movs	r0, #250	; 0xfa
 8000348:	f000 fa0e 	bl	8000768 <task_delay>
		led_on(LED_BLUE);
 800034c:	e7f2      	b.n	8000334 <task3_run+0x4>

0800034e <task4_run>:
	}
}

void task4_run()
{
 800034e:	b580      	push	{r7, lr}
 8000350:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_RED);
 8000352:	200e      	movs	r0, #14
 8000354:	f7ff ff82 	bl	800025c <led_on>
		task_delay(125);
 8000358:	207d      	movs	r0, #125	; 0x7d
 800035a:	f000 fa05 	bl	8000768 <task_delay>
		led_off(LED_RED);
 800035e:	200e      	movs	r0, #14
 8000360:	f7ff ff94 	bl	800028c <led_off>
		task_delay(125);
 8000364:	207d      	movs	r0, #125	; 0x7d
 8000366:	f000 f9ff 	bl	8000768 <task_delay>
		led_on(LED_RED);
 800036a:	e7f2      	b.n	8000352 <task4_run+0x4>

0800036c <idle_task>:
	}
}

void idle_task(void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0
	while(1);
 8000370:	e7fe      	b.n	8000370 <idle_task+0x4>
	...

08000374 <init_Systick>:
}

void init_Systick(uint32_t ticks_hz)
{
 8000374:	b480      	push	{r7}
 8000376:	b087      	sub	sp, #28
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
	uint32_t* SRVR = (uint32_t*)0xE000E014;
 800037c:	4b16      	ldr	r3, [pc, #88]	; (80003d8 <init_Systick+0x64>)
 800037e:	617b      	str	r3, [r7, #20]
	   uint32_t* SCSR = (uint32_t*)0xE000E010;  // SYSTICK CONTROL REGISTER
 8000380:	4b16      	ldr	r3, [pc, #88]	; (80003dc <init_Systick+0x68>)
 8000382:	613b      	str	r3, [r7, #16]
	   uint32_t count = (systick_clk/ticks_hz)-1;
 8000384:	4a16      	ldr	r2, [pc, #88]	; (80003e0 <init_Systick+0x6c>)
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	fbb2 f3f3 	udiv	r3, r2, r3
 800038c:	3b01      	subs	r3, #1
 800038e:	60fb      	str	r3, [r7, #12]

	   *SRVR &= ~(0x00FFFFFF); // CLEAR VALUE OF SVR
 8000390:	697b      	ldr	r3, [r7, #20]
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8000398:	697b      	ldr	r3, [r7, #20]
 800039a:	601a      	str	r2, [r3, #0]
	   *SRVR |= count; // LOAD VALUE INTO SVR
 800039c:	697b      	ldr	r3, [r7, #20]
 800039e:	681a      	ldr	r2, [r3, #0]
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	431a      	orrs	r2, r3
 80003a4:	697b      	ldr	r3, [r7, #20]
 80003a6:	601a      	str	r2, [r3, #0]

	   *SCSR |= (1<<1); //ENABLE SYSTEM EXCEPTION REQUEST
 80003a8:	693b      	ldr	r3, [r7, #16]
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	f043 0202 	orr.w	r2, r3, #2
 80003b0:	693b      	ldr	r3, [r7, #16]
 80003b2:	601a      	str	r2, [r3, #0]
	   *SCSR |= (1<<2); //INDICATES CLOCK SOURCE, PROCESSOR CLOCK SOURCE
 80003b4:	693b      	ldr	r3, [r7, #16]
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	f043 0204 	orr.w	r2, r3, #4
 80003bc:	693b      	ldr	r3, [r7, #16]
 80003be:	601a      	str	r2, [r3, #0]
	   *SCSR |= (1<<0); //ENABLE SYSTICK Handler/Counter
 80003c0:	693b      	ldr	r3, [r7, #16]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	f043 0201 	orr.w	r2, r3, #1
 80003c8:	693b      	ldr	r3, [r7, #16]
 80003ca:	601a      	str	r2, [r3, #0]
}
 80003cc:	bf00      	nop
 80003ce:	371c      	adds	r7, #28
 80003d0:	46bd      	mov	sp, r7
 80003d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d6:	4770      	bx	lr
 80003d8:	e000e014 	.word	0xe000e014
 80003dc:	e000e010 	.word	0xe000e010
 80003e0:	00f42400 	.word	0x00f42400

080003e4 <init_Scheduler_Stack>:

__attribute__((naked)) void init_Scheduler_Stack(uint32_t SHED_StackStart)
{
 80003e4:	4603      	mov	r3, r0
    __asm volatile("MSR MSP,R0": : "r" (SHED_StackStart):);
 80003e6:	f380 8808 	msr	MSP, r0
    __asm volatile("BX LR");  //Copies value of LR into PC
 80003ea:	4770      	bx	lr
}
 80003ec:	bf00      	nop

080003ee <PendSV_Handler>:

__attribute__((naked)) void PendSV_Handler(void)
{
	 /*Save context of current task*/
	 //Get psp value of the current task
		__asm volatile("MRS R0,PSP");
 80003ee:	f3ef 8009 	mrs	r0, PSP
	// Using the above PSP value store SF2(R4 TO R11)
		__asm volatile("STMDB R0!,{R4-R11}"); //R0! points to the address where the first register in the list gets stored
 80003f2:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
		//Stmdb-->decrement before storing multiple registers

		__asm volatile("PUSH {LR}");
 80003f6:	b500      	push	{lr}
	//Save current value of PSP
		__asm volatile("BL save_psp");
 80003f8:	f000 f860 	bl	80004bc <save_psp>

		 /*Retrieve context of next task*/
		//Decide the next task to run
		__asm volatile("BL update_next_task");
 80003fc:	f000 f95c 	bl	80006b8 <update_next_task>

		//get its past psp value
		__asm volatile("BL get_psp");
 8000400:	f000 f93a 	bl	8000678 <get_psp>
		// Using the above PSP value retrieve SF2(R4 TO R11)
		__asm volatile("LDMIA R0!,{R4-R11}"); //R0! points to the address where the first register in the list gets loaded
 8000404:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
		//ldmia-->load multiple registers and increment after

		//update psp and exit
		__asm volatile("MSR PSP,R0");
 8000408:	f380 8809 	msr	PSP, r0

		__asm volatile("POP {LR}");
 800040c:	f85d eb04 	ldr.w	lr, [sp], #4
		__asm volatile("BX LR");
 8000410:	4770      	bx	lr
}
 8000412:	bf00      	nop

08000414 <update_global_tick_count>:

void update_global_tick_count(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
	g_tick_count++;
 8000418:	4b04      	ldr	r3, [pc, #16]	; (800042c <update_global_tick_count+0x18>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	3301      	adds	r3, #1
 800041e:	4a03      	ldr	r2, [pc, #12]	; (800042c <update_global_tick_count+0x18>)
 8000420:	6013      	str	r3, [r2, #0]
}
 8000422:	bf00      	nop
 8000424:	46bd      	mov	sp, r7
 8000426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042a:	4770      	bx	lr
 800042c:	20000088 	.word	0x20000088

08000430 <unblock_tasks>:

void unblock_tasks(void)
{
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0
	for(int i = 1 ; i < Max_tasks ; i++)
 8000436:	2301      	movs	r3, #1
 8000438:	607b      	str	r3, [r7, #4]
 800043a:	e01b      	b.n	8000474 <unblock_tasks+0x44>
	{
		if(user_tasks[i].current_state != TASK_READY_STATE)
 800043c:	4a12      	ldr	r2, [pc, #72]	; (8000488 <unblock_tasks+0x58>)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	011b      	lsls	r3, r3, #4
 8000442:	4413      	add	r3, r2
 8000444:	3308      	adds	r3, #8
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d010      	beq.n	800046e <unblock_tasks+0x3e>
		{
			if(user_tasks[i].block_count == g_tick_count)
 800044c:	4a0e      	ldr	r2, [pc, #56]	; (8000488 <unblock_tasks+0x58>)
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	011b      	lsls	r3, r3, #4
 8000452:	4413      	add	r3, r2
 8000454:	3304      	adds	r3, #4
 8000456:	681a      	ldr	r2, [r3, #0]
 8000458:	4b0c      	ldr	r3, [pc, #48]	; (800048c <unblock_tasks+0x5c>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	429a      	cmp	r2, r3
 800045e:	d106      	bne.n	800046e <unblock_tasks+0x3e>
			{
				user_tasks[i].current_state = TASK_READY_STATE;
 8000460:	4a09      	ldr	r2, [pc, #36]	; (8000488 <unblock_tasks+0x58>)
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	011b      	lsls	r3, r3, #4
 8000466:	4413      	add	r3, r2
 8000468:	3308      	adds	r3, #8
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
	for(int i = 1 ; i < Max_tasks ; i++)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	3301      	adds	r3, #1
 8000472:	607b      	str	r3, [r7, #4]
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	2b04      	cmp	r3, #4
 8000478:	dde0      	ble.n	800043c <unblock_tasks+0xc>
			}
		}

	}
}
 800047a:	bf00      	nop
 800047c:	370c      	adds	r7, #12
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop
 8000488:	20000098 	.word	0x20000098
 800048c:	20000088 	.word	0x20000088

08000490 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0
	uint32_t *pICSR = (uint32_t*)0xE000ED04;
 8000496:	4b08      	ldr	r3, [pc, #32]	; (80004b8 <SysTick_Handler+0x28>)
 8000498:	607b      	str	r3, [r7, #4]

    update_global_tick_count();
 800049a:	f7ff ffbb 	bl	8000414 <update_global_tick_count>

    unblock_tasks();
 800049e:	f7ff ffc7 	bl	8000430 <unblock_tasks>

    //pend the pendsv exception
    *pICSR |= ( 1 << 28);
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	601a      	str	r2, [r3, #0]
}
 80004ae:	bf00      	nop
 80004b0:	3708      	adds	r7, #8
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	e000ed04 	.word	0xe000ed04

080004bc <save_psp>:

void save_psp(uint32_t current_psp_value)
{
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
	user_tasks[current_task].psp_value=current_psp_value;
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <save_psp+0x24>)
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	4a06      	ldr	r2, [pc, #24]	; (80004e4 <save_psp+0x28>)
 80004ca:	011b      	lsls	r3, r3, #4
 80004cc:	4413      	add	r3, r2
 80004ce:	687a      	ldr	r2, [r7, #4]
 80004d0:	601a      	str	r2, [r3, #0]
}
 80004d2:	bf00      	nop
 80004d4:	370c      	adds	r7, #12
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	20000004 	.word	0x20000004
 80004e4:	20000098 	.word	0x20000098

080004e8 <init_Tasks_Stack>:

void init_Tasks_Stack()
{
 80004e8:	b480      	push	{r7}
 80004ea:	b085      	sub	sp, #20
 80004ec:	af00      	add	r7, sp, #0
	user_tasks[0].current_state = TASK_READY_STATE;
 80004ee:	4b3a      	ldr	r3, [pc, #232]	; (80005d8 <init_Tasks_Stack+0xf0>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	721a      	strb	r2, [r3, #8]
	user_tasks[1].current_state = TASK_READY_STATE;
 80004f4:	4b38      	ldr	r3, [pc, #224]	; (80005d8 <init_Tasks_Stack+0xf0>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	761a      	strb	r2, [r3, #24]
	user_tasks[2].current_state = TASK_READY_STATE;
 80004fa:	4b37      	ldr	r3, [pc, #220]	; (80005d8 <init_Tasks_Stack+0xf0>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	user_tasks[3].current_state = TASK_READY_STATE;
 8000502:	4b35      	ldr	r3, [pc, #212]	; (80005d8 <init_Tasks_Stack+0xf0>)
 8000504:	2200      	movs	r2, #0
 8000506:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	user_tasks[4].current_state = TASK_READY_STATE;
 800050a:	4b33      	ldr	r3, [pc, #204]	; (80005d8 <init_Tasks_Stack+0xf0>)
 800050c:	2200      	movs	r2, #0
 800050e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	user_tasks[0].psp_value = idle_stack_start;
 8000512:	4b31      	ldr	r3, [pc, #196]	; (80005d8 <init_Tasks_Stack+0xf0>)
 8000514:	4a31      	ldr	r2, [pc, #196]	; (80005dc <init_Tasks_Stack+0xf4>)
 8000516:	601a      	str	r2, [r3, #0]
	user_tasks[1].psp_value = t1_stack_start;
 8000518:	4b2f      	ldr	r3, [pc, #188]	; (80005d8 <init_Tasks_Stack+0xf0>)
 800051a:	4a31      	ldr	r2, [pc, #196]	; (80005e0 <init_Tasks_Stack+0xf8>)
 800051c:	611a      	str	r2, [r3, #16]
	user_tasks[2].psp_value = t2_stack_start;
 800051e:	4b2e      	ldr	r3, [pc, #184]	; (80005d8 <init_Tasks_Stack+0xf0>)
 8000520:	4a30      	ldr	r2, [pc, #192]	; (80005e4 <init_Tasks_Stack+0xfc>)
 8000522:	621a      	str	r2, [r3, #32]
	user_tasks[3].psp_value = t3_stack_start;
 8000524:	4b2c      	ldr	r3, [pc, #176]	; (80005d8 <init_Tasks_Stack+0xf0>)
 8000526:	4a30      	ldr	r2, [pc, #192]	; (80005e8 <init_Tasks_Stack+0x100>)
 8000528:	631a      	str	r2, [r3, #48]	; 0x30
	user_tasks[4].psp_value = t4_stack_start;
 800052a:	4b2b      	ldr	r3, [pc, #172]	; (80005d8 <init_Tasks_Stack+0xf0>)
 800052c:	4a2f      	ldr	r2, [pc, #188]	; (80005ec <init_Tasks_Stack+0x104>)
 800052e:	641a      	str	r2, [r3, #64]	; 0x40

	user_tasks[0].task_handler = idle_task;
 8000530:	4b29      	ldr	r3, [pc, #164]	; (80005d8 <init_Tasks_Stack+0xf0>)
 8000532:	4a2f      	ldr	r2, [pc, #188]	; (80005f0 <init_Tasks_Stack+0x108>)
 8000534:	60da      	str	r2, [r3, #12]
	user_tasks[1].task_handler = task1_run;
 8000536:	4b28      	ldr	r3, [pc, #160]	; (80005d8 <init_Tasks_Stack+0xf0>)
 8000538:	4a2e      	ldr	r2, [pc, #184]	; (80005f4 <init_Tasks_Stack+0x10c>)
 800053a:	61da      	str	r2, [r3, #28]
	user_tasks[2].task_handler = task2_run;
 800053c:	4b26      	ldr	r3, [pc, #152]	; (80005d8 <init_Tasks_Stack+0xf0>)
 800053e:	4a2e      	ldr	r2, [pc, #184]	; (80005f8 <init_Tasks_Stack+0x110>)
 8000540:	62da      	str	r2, [r3, #44]	; 0x2c
	user_tasks[3].task_handler = task3_run;
 8000542:	4b25      	ldr	r3, [pc, #148]	; (80005d8 <init_Tasks_Stack+0xf0>)
 8000544:	4a2d      	ldr	r2, [pc, #180]	; (80005fc <init_Tasks_Stack+0x114>)
 8000546:	63da      	str	r2, [r3, #60]	; 0x3c
	user_tasks[4].task_handler = task4_run;
 8000548:	4b23      	ldr	r3, [pc, #140]	; (80005d8 <init_Tasks_Stack+0xf0>)
 800054a:	4a2d      	ldr	r2, [pc, #180]	; (8000600 <init_Tasks_Stack+0x118>)
 800054c:	64da      	str	r2, [r3, #76]	; 0x4c

	uint32_t *pPsp;
  for(int i=0;i<Max_tasks;i++)
 800054e:	2300      	movs	r3, #0
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	e037      	b.n	80005c4 <init_Tasks_Stack+0xdc>
  {
    pPsp=(uint32_t*) user_tasks[i].psp_value;
 8000554:	4a20      	ldr	r2, [pc, #128]	; (80005d8 <init_Tasks_Stack+0xf0>)
 8000556:	68bb      	ldr	r3, [r7, #8]
 8000558:	011b      	lsls	r3, r3, #4
 800055a:	4413      	add	r3, r2
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	60fb      	str	r3, [r7, #12]

    pPsp--;
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	3b04      	subs	r3, #4
 8000564:	60fb      	str	r3, [r7, #12]
    *pPsp=Dummy_xpsr;
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800056c:	601a      	str	r2, [r3, #0]

    pPsp--;//PC
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	3b04      	subs	r3, #4
 8000572:	60fb      	str	r3, [r7, #12]
    *pPsp=(uint32_t) user_tasks[i].task_handler;
 8000574:	4a18      	ldr	r2, [pc, #96]	; (80005d8 <init_Tasks_Stack+0xf0>)
 8000576:	68bb      	ldr	r3, [r7, #8]
 8000578:	011b      	lsls	r3, r3, #4
 800057a:	4413      	add	r3, r2
 800057c:	330c      	adds	r3, #12
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	461a      	mov	r2, r3
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	601a      	str	r2, [r3, #0]

    pPsp--;//LR
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	3b04      	subs	r3, #4
 800058a:	60fb      	str	r3, [r7, #12]
    *pPsp=0xFFFFFFFD;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	f06f 0202 	mvn.w	r2, #2
 8000592:	601a      	str	r2, [r3, #0]
    for(int i=0;i<13;i++) //initializing Registers R0 to R12 as 0
 8000594:	2300      	movs	r3, #0
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	e008      	b.n	80005ac <init_Tasks_Stack+0xc4>
    { pPsp--;
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	3b04      	subs	r3, #4
 800059e:	60fb      	str	r3, [r7, #12]
    *pPsp=0;
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
    for(int i=0;i<13;i++) //initializing Registers R0 to R12 as 0
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	3301      	adds	r3, #1
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2b0c      	cmp	r3, #12
 80005b0:	ddf3      	ble.n	800059a <init_Tasks_Stack+0xb2>
    }
    user_tasks[i].psp_value=(uint32_t)pPsp; //Preserving value of PSP
 80005b2:	68fa      	ldr	r2, [r7, #12]
 80005b4:	4908      	ldr	r1, [pc, #32]	; (80005d8 <init_Tasks_Stack+0xf0>)
 80005b6:	68bb      	ldr	r3, [r7, #8]
 80005b8:	011b      	lsls	r3, r3, #4
 80005ba:	440b      	add	r3, r1
 80005bc:	601a      	str	r2, [r3, #0]
  for(int i=0;i<Max_tasks;i++)
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	3301      	adds	r3, #1
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	2b04      	cmp	r3, #4
 80005c8:	ddc4      	ble.n	8000554 <init_Tasks_Stack+0x6c>
  }
}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000098 	.word	0x20000098
 80005dc:	2001f000 	.word	0x2001f000
 80005e0:	20020000 	.word	0x20020000
 80005e4:	2001fc00 	.word	0x2001fc00
 80005e8:	2001f800 	.word	0x2001f800
 80005ec:	2001f400 	.word	0x2001f400
 80005f0:	0800036d 	.word	0x0800036d
 80005f4:	080002ed 	.word	0x080002ed
 80005f8:	0800030f 	.word	0x0800030f
 80005fc:	08000331 	.word	0x08000331
 8000600:	0800034f 	.word	0x0800034f

08000604 <enable_processor_faults>:

void enable_processor_faults()
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
	*SHCSR |= (1 << 16); // MEM MANAGE
 8000608:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <enable_processor_faults+0x40>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <enable_processor_faults+0x40>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000616:	601a      	str	r2, [r3, #0]
	*SHCSR |= (1 << 17); // BUS FAULT
 8000618:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <enable_processor_faults+0x40>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	681a      	ldr	r2, [r3, #0]
 800061e:	4b09      	ldr	r3, [pc, #36]	; (8000644 <enable_processor_faults+0x40>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000626:	601a      	str	r2, [r3, #0]
	*SHCSR |= (1 << 18); // USAGE FAULT
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <enable_processor_faults+0x40>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	4b05      	ldr	r3, [pc, #20]	; (8000644 <enable_processor_faults+0x40>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000636:	601a      	str	r2, [r3, #0]
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	20000000 	.word	0x20000000

08000648 <HardFault_Handler>:

void HardFault_Handler(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  printf("Exception: Hard Fault\n");
 800064c:	4801      	ldr	r0, [pc, #4]	; (8000654 <HardFault_Handler+0xc>)
 800064e:	f000 fa0f 	bl	8000a70 <puts>
  while(1);
 8000652:	e7fe      	b.n	8000652 <HardFault_Handler+0xa>
 8000654:	080012a0 	.word	0x080012a0

08000658 <MemManage_Handler>:
}

void MemManage_Handler(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	  printf("Exception: Memory management Fault\n");
 800065c:	4801      	ldr	r0, [pc, #4]	; (8000664 <MemManage_Handler+0xc>)
 800065e:	f000 fa07 	bl	8000a70 <puts>
	  while(1);
 8000662:	e7fe      	b.n	8000662 <MemManage_Handler+0xa>
 8000664:	080012b8 	.word	0x080012b8

08000668 <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	  printf("Exception: Bus Fault\n");
 800066c:	4801      	ldr	r0, [pc, #4]	; (8000674 <BusFault_Handler+0xc>)
 800066e:	f000 f9ff 	bl	8000a70 <puts>
	  while(1);
 8000672:	e7fe      	b.n	8000672 <BusFault_Handler+0xa>
 8000674:	080012dc 	.word	0x080012dc

08000678 <get_psp>:
	  //printf("UFSR = %lx\n",(*UFSR) & 0xFFFF);
	  while(1);
}
*/
uint32_t get_psp(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
 return user_tasks[current_task].psp_value;
 800067c:	4b05      	ldr	r3, [pc, #20]	; (8000694 <get_psp+0x1c>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	4a05      	ldr	r2, [pc, #20]	; (8000698 <get_psp+0x20>)
 8000682:	011b      	lsls	r3, r3, #4
 8000684:	4413      	add	r3, r2
 8000686:	681b      	ldr	r3, [r3, #0]
}
 8000688:	4618      	mov	r0, r3
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	20000004 	.word	0x20000004
 8000698:	20000098 	.word	0x20000098

0800069c <switch_sp_to_psp>:
__attribute__((naked)) void switch_sp_to_psp(void)
{
  // Initialize PSP with task 1 stack start address
	__asm volatile("PUSH {LR}"); //preserve LR which connects back to main
 800069c:	b500      	push	{lr}
	__asm volatile("BL get_psp");
 800069e:	f7ff ffeb 	bl	8000678 <get_psp>
	__asm volatile("MSR PSP,R0"); //initialize psp
 80006a2:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}"); // pop back LR
 80006a6:	f85d eb04 	ldr.w	lr, [sp], #4

 // change SP to PSP using Control register
	__asm volatile("MOV R0,#0X02");
 80006aa:	f04f 0002 	mov.w	r0, #2
	__asm volatile("MSR CONTROL,R0");
 80006ae:	f380 8814 	msr	CONTROL, r0
	__asm volatile("BX LR");
 80006b2:	4770      	bx	lr

}
 80006b4:	bf00      	nop
	...

080006b8 <update_next_task>:

void update_next_task(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
	int state = TASK_BLOCKED_STATE;
 80006be:	23ff      	movs	r3, #255	; 0xff
 80006c0:	607b      	str	r3, [r7, #4]

	for(int i= 0 ; i < (Max_tasks) ; i++)
 80006c2:	2300      	movs	r3, #0
 80006c4:	603b      	str	r3, [r7, #0]
 80006c6:	e024      	b.n	8000712 <update_next_task+0x5a>
	{
		current_task++;
 80006c8:	4b1a      	ldr	r3, [pc, #104]	; (8000734 <update_next_task+0x7c>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	3301      	adds	r3, #1
 80006ce:	b2da      	uxtb	r2, r3
 80006d0:	4b18      	ldr	r3, [pc, #96]	; (8000734 <update_next_task+0x7c>)
 80006d2:	701a      	strb	r2, [r3, #0]
	    current_task %= Max_tasks;
 80006d4:	4b17      	ldr	r3, [pc, #92]	; (8000734 <update_next_task+0x7c>)
 80006d6:	781a      	ldrb	r2, [r3, #0]
 80006d8:	4b17      	ldr	r3, [pc, #92]	; (8000738 <update_next_task+0x80>)
 80006da:	fba3 1302 	umull	r1, r3, r3, r2
 80006de:	0899      	lsrs	r1, r3, #2
 80006e0:	460b      	mov	r3, r1
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	440b      	add	r3, r1
 80006e6:	1ad3      	subs	r3, r2, r3
 80006e8:	b2da      	uxtb	r2, r3
 80006ea:	4b12      	ldr	r3, [pc, #72]	; (8000734 <update_next_task+0x7c>)
 80006ec:	701a      	strb	r2, [r3, #0]
		state = user_tasks[current_task].current_state;
 80006ee:	4b11      	ldr	r3, [pc, #68]	; (8000734 <update_next_task+0x7c>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	4a12      	ldr	r2, [pc, #72]	; (800073c <update_next_task+0x84>)
 80006f4:	011b      	lsls	r3, r3, #4
 80006f6:	4413      	add	r3, r2
 80006f8:	3308      	adds	r3, #8
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	607b      	str	r3, [r7, #4]
		if( (state == TASK_READY_STATE) && (current_task != 0) )
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d103      	bne.n	800070c <update_next_task+0x54>
 8000704:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <update_next_task+0x7c>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d106      	bne.n	800071a <update_next_task+0x62>
	for(int i= 0 ; i < (Max_tasks) ; i++)
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	3301      	adds	r3, #1
 8000710:	603b      	str	r3, [r7, #0]
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	2b04      	cmp	r3, #4
 8000716:	ddd7      	ble.n	80006c8 <update_next_task+0x10>
 8000718:	e000      	b.n	800071c <update_next_task+0x64>
			break;
 800071a:	bf00      	nop
	}

	if(state != TASK_READY_STATE)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d002      	beq.n	8000728 <update_next_task+0x70>
		current_task = 0;
 8000722:	4b04      	ldr	r3, [pc, #16]	; (8000734 <update_next_task+0x7c>)
 8000724:	2200      	movs	r2, #0
 8000726:	701a      	strb	r2, [r3, #0]
}
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	20000004 	.word	0x20000004
 8000738:	cccccccd 	.word	0xcccccccd
 800073c:	20000098 	.word	0x20000098

08000740 <schedule>:

void schedule(void)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
	//pend the pendsv exception
	uint32_t *pICSR = (uint32_t*)0xE000ED04;
 8000746:	4b07      	ldr	r3, [pc, #28]	; (8000764 <schedule+0x24>)
 8000748:	607b      	str	r3, [r7, #4]
	*pICSR |= ( 1 << 28);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	601a      	str	r2, [r3, #0]

}
 8000756:	bf00      	nop
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	e000ed04 	.word	0xe000ed04

08000768 <task_delay>:

void task_delay(uint32_t tick_count)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	if(current_task)
 8000770:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <task_delay+0x44>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d015      	beq.n	80007a4 <task_delay+0x3c>
	{
	   user_tasks[current_task].block_count = g_tick_count + tick_count;
 8000778:	4b0d      	ldr	r3, [pc, #52]	; (80007b0 <task_delay+0x48>)
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <task_delay+0x44>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	4618      	mov	r0, r3
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	441a      	add	r2, r3
 8000786:	490b      	ldr	r1, [pc, #44]	; (80007b4 <task_delay+0x4c>)
 8000788:	0103      	lsls	r3, r0, #4
 800078a:	440b      	add	r3, r1
 800078c:	3304      	adds	r3, #4
 800078e:	601a      	str	r2, [r3, #0]
	   user_tasks[current_task].current_state = TASK_BLOCKED_STATE;
 8000790:	4b06      	ldr	r3, [pc, #24]	; (80007ac <task_delay+0x44>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	4a07      	ldr	r2, [pc, #28]	; (80007b4 <task_delay+0x4c>)
 8000796:	011b      	lsls	r3, r3, #4
 8000798:	4413      	add	r3, r2
 800079a:	3308      	adds	r3, #8
 800079c:	22ff      	movs	r2, #255	; 0xff
 800079e:	701a      	strb	r2, [r3, #0]
	   schedule();
 80007a0:	f7ff ffce 	bl	8000740 <schedule>
	}
}
 80007a4:	bf00      	nop
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000004 	.word	0x20000004
 80007b0:	20000088 	.word	0x20000088
 80007b4:	20000098 	.word	0x20000098

080007b8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b086      	sub	sp, #24
 80007bc:	af00      	add	r7, sp, #0
 80007be:	60f8      	str	r0, [r7, #12]
 80007c0:	60b9      	str	r1, [r7, #8]
 80007c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
 80007c8:	e00a      	b.n	80007e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80007ca:	f3af 8000 	nop.w
 80007ce:	4601      	mov	r1, r0
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	1c5a      	adds	r2, r3, #1
 80007d4:	60ba      	str	r2, [r7, #8]
 80007d6:	b2ca      	uxtb	r2, r1
 80007d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	3301      	adds	r3, #1
 80007de:	617b      	str	r3, [r7, #20]
 80007e0:	697a      	ldr	r2, [r7, #20]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	dbf0      	blt.n	80007ca <_read+0x12>
	}

return len;
 80007e8:	687b      	ldr	r3, [r7, #4]
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3718      	adds	r7, #24
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b086      	sub	sp, #24
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	60f8      	str	r0, [r7, #12]
 80007fa:	60b9      	str	r1, [r7, #8]
 80007fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
 8000802:	e009      	b.n	8000818 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	1c5a      	adds	r2, r3, #1
 8000808:	60ba      	str	r2, [r7, #8]
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	4618      	mov	r0, r3
 800080e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	3301      	adds	r3, #1
 8000816:	617b      	str	r3, [r7, #20]
 8000818:	697a      	ldr	r2, [r7, #20]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	429a      	cmp	r2, r3
 800081e:	dbf1      	blt.n	8000804 <_write+0x12>
	}
	return len;
 8000820:	687b      	ldr	r3, [r7, #4]
}
 8000822:	4618      	mov	r0, r3
 8000824:	3718      	adds	r7, #24
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <_close>:

int _close(int file)
{
 800082a:	b480      	push	{r7}
 800082c:	b083      	sub	sp, #12
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
	return -1;
 8000832:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000836:	4618      	mov	r0, r3
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr

08000842 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000842:	b480      	push	{r7}
 8000844:	b083      	sub	sp, #12
 8000846:	af00      	add	r7, sp, #0
 8000848:	6078      	str	r0, [r7, #4]
 800084a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000852:	605a      	str	r2, [r3, #4]
	return 0;
 8000854:	2300      	movs	r3, #0
}
 8000856:	4618      	mov	r0, r3
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr

08000862 <_isatty>:

int _isatty(int file)
{
 8000862:	b480      	push	{r7}
 8000864:	b083      	sub	sp, #12
 8000866:	af00      	add	r7, sp, #0
 8000868:	6078      	str	r0, [r7, #4]
	return 1;
 800086a:	2301      	movs	r3, #1
}
 800086c:	4618      	mov	r0, r3
 800086e:	370c      	adds	r7, #12
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr

08000878 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000878:	b480      	push	{r7}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
 800087e:	60f8      	str	r0, [r7, #12]
 8000880:	60b9      	str	r1, [r7, #8]
 8000882:	607a      	str	r2, [r7, #4]
	return 0;
 8000884:	2300      	movs	r3, #0
}
 8000886:	4618      	mov	r0, r3
 8000888:	3714      	adds	r7, #20
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
	...

08000894 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800089c:	4a14      	ldr	r2, [pc, #80]	; (80008f0 <_sbrk+0x5c>)
 800089e:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <_sbrk+0x60>)
 80008a0:	1ad3      	subs	r3, r2, r3
 80008a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008a8:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <_sbrk+0x64>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d102      	bne.n	80008b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008b0:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <_sbrk+0x64>)
 80008b2:	4a12      	ldr	r2, [pc, #72]	; (80008fc <_sbrk+0x68>)
 80008b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008b6:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <_sbrk+0x64>)
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	4413      	add	r3, r2
 80008be:	693a      	ldr	r2, [r7, #16]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	d207      	bcs.n	80008d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008c4:	f000 f846 	bl	8000954 <__errno>
 80008c8:	4602      	mov	r2, r0
 80008ca:	230c      	movs	r3, #12
 80008cc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80008ce:	f04f 33ff 	mov.w	r3, #4294967295
 80008d2:	e009      	b.n	80008e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008d4:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <_sbrk+0x64>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008da:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <_sbrk+0x64>)
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4413      	add	r3, r2
 80008e2:	4a05      	ldr	r2, [pc, #20]	; (80008f8 <_sbrk+0x64>)
 80008e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008e6:	68fb      	ldr	r3, [r7, #12]
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3718      	adds	r7, #24
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20020000 	.word	0x20020000
 80008f4:	00000400 	.word	0x00000400
 80008f8:	2000008c 	.word	0x2000008c
 80008fc:	200000f0 	.word	0x200000f0

08000900 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000900:	480d      	ldr	r0, [pc, #52]	; (8000938 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000902:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000904:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000908:	480c      	ldr	r0, [pc, #48]	; (800093c <LoopForever+0x6>)
  ldr r1, =_edata
 800090a:	490d      	ldr	r1, [pc, #52]	; (8000940 <LoopForever+0xa>)
  ldr r2, =_sidata
 800090c:	4a0d      	ldr	r2, [pc, #52]	; (8000944 <LoopForever+0xe>)
  movs r3, #0
 800090e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000910:	e002      	b.n	8000918 <LoopCopyDataInit>

08000912 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000912:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000914:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000916:	3304      	adds	r3, #4

08000918 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000918:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800091a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800091c:	d3f9      	bcc.n	8000912 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800091e:	4a0a      	ldr	r2, [pc, #40]	; (8000948 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000920:	4c0a      	ldr	r4, [pc, #40]	; (800094c <LoopForever+0x16>)
  movs r3, #0
 8000922:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000924:	e001      	b.n	800092a <LoopFillZerobss>

08000926 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000926:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000928:	3204      	adds	r2, #4

0800092a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800092a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800092c:	d3fb      	bcc.n	8000926 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800092e:	f000 f817 	bl	8000960 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000932:	f7ff fcc5 	bl	80002c0 <main>

08000936 <LoopForever>:

LoopForever:
    b LoopForever
 8000936:	e7fe      	b.n	8000936 <LoopForever>
  ldr   r0, =_estack
 8000938:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800093c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000940:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000944:	08001360 	.word	0x08001360
  ldr r2, =_sbss
 8000948:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800094c:	200000ec 	.word	0x200000ec

08000950 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000950:	e7fe      	b.n	8000950 <ADC_IRQHandler>
	...

08000954 <__errno>:
 8000954:	4b01      	ldr	r3, [pc, #4]	; (800095c <__errno+0x8>)
 8000956:	6818      	ldr	r0, [r3, #0]
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	20000008 	.word	0x20000008

08000960 <__libc_init_array>:
 8000960:	b570      	push	{r4, r5, r6, lr}
 8000962:	4e0d      	ldr	r6, [pc, #52]	; (8000998 <__libc_init_array+0x38>)
 8000964:	4c0d      	ldr	r4, [pc, #52]	; (800099c <__libc_init_array+0x3c>)
 8000966:	1ba4      	subs	r4, r4, r6
 8000968:	10a4      	asrs	r4, r4, #2
 800096a:	2500      	movs	r5, #0
 800096c:	42a5      	cmp	r5, r4
 800096e:	d109      	bne.n	8000984 <__libc_init_array+0x24>
 8000970:	4e0b      	ldr	r6, [pc, #44]	; (80009a0 <__libc_init_array+0x40>)
 8000972:	4c0c      	ldr	r4, [pc, #48]	; (80009a4 <__libc_init_array+0x44>)
 8000974:	f000 fc88 	bl	8001288 <_init>
 8000978:	1ba4      	subs	r4, r4, r6
 800097a:	10a4      	asrs	r4, r4, #2
 800097c:	2500      	movs	r5, #0
 800097e:	42a5      	cmp	r5, r4
 8000980:	d105      	bne.n	800098e <__libc_init_array+0x2e>
 8000982:	bd70      	pop	{r4, r5, r6, pc}
 8000984:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000988:	4798      	blx	r3
 800098a:	3501      	adds	r5, #1
 800098c:	e7ee      	b.n	800096c <__libc_init_array+0xc>
 800098e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000992:	4798      	blx	r3
 8000994:	3501      	adds	r5, #1
 8000996:	e7f2      	b.n	800097e <__libc_init_array+0x1e>
 8000998:	08001358 	.word	0x08001358
 800099c:	08001358 	.word	0x08001358
 80009a0:	08001358 	.word	0x08001358
 80009a4:	0800135c 	.word	0x0800135c

080009a8 <memset>:
 80009a8:	4402      	add	r2, r0
 80009aa:	4603      	mov	r3, r0
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d100      	bne.n	80009b2 <memset+0xa>
 80009b0:	4770      	bx	lr
 80009b2:	f803 1b01 	strb.w	r1, [r3], #1
 80009b6:	e7f9      	b.n	80009ac <memset+0x4>

080009b8 <_puts_r>:
 80009b8:	b570      	push	{r4, r5, r6, lr}
 80009ba:	460e      	mov	r6, r1
 80009bc:	4605      	mov	r5, r0
 80009be:	b118      	cbz	r0, 80009c8 <_puts_r+0x10>
 80009c0:	6983      	ldr	r3, [r0, #24]
 80009c2:	b90b      	cbnz	r3, 80009c8 <_puts_r+0x10>
 80009c4:	f000 fa0c 	bl	8000de0 <__sinit>
 80009c8:	69ab      	ldr	r3, [r5, #24]
 80009ca:	68ac      	ldr	r4, [r5, #8]
 80009cc:	b913      	cbnz	r3, 80009d4 <_puts_r+0x1c>
 80009ce:	4628      	mov	r0, r5
 80009d0:	f000 fa06 	bl	8000de0 <__sinit>
 80009d4:	4b23      	ldr	r3, [pc, #140]	; (8000a64 <_puts_r+0xac>)
 80009d6:	429c      	cmp	r4, r3
 80009d8:	d117      	bne.n	8000a0a <_puts_r+0x52>
 80009da:	686c      	ldr	r4, [r5, #4]
 80009dc:	89a3      	ldrh	r3, [r4, #12]
 80009de:	071b      	lsls	r3, r3, #28
 80009e0:	d51d      	bpl.n	8000a1e <_puts_r+0x66>
 80009e2:	6923      	ldr	r3, [r4, #16]
 80009e4:	b1db      	cbz	r3, 8000a1e <_puts_r+0x66>
 80009e6:	3e01      	subs	r6, #1
 80009e8:	68a3      	ldr	r3, [r4, #8]
 80009ea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80009ee:	3b01      	subs	r3, #1
 80009f0:	60a3      	str	r3, [r4, #8]
 80009f2:	b9e9      	cbnz	r1, 8000a30 <_puts_r+0x78>
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	da2e      	bge.n	8000a56 <_puts_r+0x9e>
 80009f8:	4622      	mov	r2, r4
 80009fa:	210a      	movs	r1, #10
 80009fc:	4628      	mov	r0, r5
 80009fe:	f000 f83f 	bl	8000a80 <__swbuf_r>
 8000a02:	3001      	adds	r0, #1
 8000a04:	d011      	beq.n	8000a2a <_puts_r+0x72>
 8000a06:	200a      	movs	r0, #10
 8000a08:	e011      	b.n	8000a2e <_puts_r+0x76>
 8000a0a:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <_puts_r+0xb0>)
 8000a0c:	429c      	cmp	r4, r3
 8000a0e:	d101      	bne.n	8000a14 <_puts_r+0x5c>
 8000a10:	68ac      	ldr	r4, [r5, #8]
 8000a12:	e7e3      	b.n	80009dc <_puts_r+0x24>
 8000a14:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <_puts_r+0xb4>)
 8000a16:	429c      	cmp	r4, r3
 8000a18:	bf08      	it	eq
 8000a1a:	68ec      	ldreq	r4, [r5, #12]
 8000a1c:	e7de      	b.n	80009dc <_puts_r+0x24>
 8000a1e:	4621      	mov	r1, r4
 8000a20:	4628      	mov	r0, r5
 8000a22:	f000 f87f 	bl	8000b24 <__swsetup_r>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	d0dd      	beq.n	80009e6 <_puts_r+0x2e>
 8000a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8000a2e:	bd70      	pop	{r4, r5, r6, pc}
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	da04      	bge.n	8000a3e <_puts_r+0x86>
 8000a34:	69a2      	ldr	r2, [r4, #24]
 8000a36:	429a      	cmp	r2, r3
 8000a38:	dc06      	bgt.n	8000a48 <_puts_r+0x90>
 8000a3a:	290a      	cmp	r1, #10
 8000a3c:	d004      	beq.n	8000a48 <_puts_r+0x90>
 8000a3e:	6823      	ldr	r3, [r4, #0]
 8000a40:	1c5a      	adds	r2, r3, #1
 8000a42:	6022      	str	r2, [r4, #0]
 8000a44:	7019      	strb	r1, [r3, #0]
 8000a46:	e7cf      	b.n	80009e8 <_puts_r+0x30>
 8000a48:	4622      	mov	r2, r4
 8000a4a:	4628      	mov	r0, r5
 8000a4c:	f000 f818 	bl	8000a80 <__swbuf_r>
 8000a50:	3001      	adds	r0, #1
 8000a52:	d1c9      	bne.n	80009e8 <_puts_r+0x30>
 8000a54:	e7e9      	b.n	8000a2a <_puts_r+0x72>
 8000a56:	6823      	ldr	r3, [r4, #0]
 8000a58:	200a      	movs	r0, #10
 8000a5a:	1c5a      	adds	r2, r3, #1
 8000a5c:	6022      	str	r2, [r4, #0]
 8000a5e:	7018      	strb	r0, [r3, #0]
 8000a60:	e7e5      	b.n	8000a2e <_puts_r+0x76>
 8000a62:	bf00      	nop
 8000a64:	08001318 	.word	0x08001318
 8000a68:	08001338 	.word	0x08001338
 8000a6c:	080012f8 	.word	0x080012f8

08000a70 <puts>:
 8000a70:	4b02      	ldr	r3, [pc, #8]	; (8000a7c <puts+0xc>)
 8000a72:	4601      	mov	r1, r0
 8000a74:	6818      	ldr	r0, [r3, #0]
 8000a76:	f7ff bf9f 	b.w	80009b8 <_puts_r>
 8000a7a:	bf00      	nop
 8000a7c:	20000008 	.word	0x20000008

08000a80 <__swbuf_r>:
 8000a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a82:	460e      	mov	r6, r1
 8000a84:	4614      	mov	r4, r2
 8000a86:	4605      	mov	r5, r0
 8000a88:	b118      	cbz	r0, 8000a92 <__swbuf_r+0x12>
 8000a8a:	6983      	ldr	r3, [r0, #24]
 8000a8c:	b90b      	cbnz	r3, 8000a92 <__swbuf_r+0x12>
 8000a8e:	f000 f9a7 	bl	8000de0 <__sinit>
 8000a92:	4b21      	ldr	r3, [pc, #132]	; (8000b18 <__swbuf_r+0x98>)
 8000a94:	429c      	cmp	r4, r3
 8000a96:	d12a      	bne.n	8000aee <__swbuf_r+0x6e>
 8000a98:	686c      	ldr	r4, [r5, #4]
 8000a9a:	69a3      	ldr	r3, [r4, #24]
 8000a9c:	60a3      	str	r3, [r4, #8]
 8000a9e:	89a3      	ldrh	r3, [r4, #12]
 8000aa0:	071a      	lsls	r2, r3, #28
 8000aa2:	d52e      	bpl.n	8000b02 <__swbuf_r+0x82>
 8000aa4:	6923      	ldr	r3, [r4, #16]
 8000aa6:	b363      	cbz	r3, 8000b02 <__swbuf_r+0x82>
 8000aa8:	6923      	ldr	r3, [r4, #16]
 8000aaa:	6820      	ldr	r0, [r4, #0]
 8000aac:	1ac0      	subs	r0, r0, r3
 8000aae:	6963      	ldr	r3, [r4, #20]
 8000ab0:	b2f6      	uxtb	r6, r6
 8000ab2:	4283      	cmp	r3, r0
 8000ab4:	4637      	mov	r7, r6
 8000ab6:	dc04      	bgt.n	8000ac2 <__swbuf_r+0x42>
 8000ab8:	4621      	mov	r1, r4
 8000aba:	4628      	mov	r0, r5
 8000abc:	f000 f926 	bl	8000d0c <_fflush_r>
 8000ac0:	bb28      	cbnz	r0, 8000b0e <__swbuf_r+0x8e>
 8000ac2:	68a3      	ldr	r3, [r4, #8]
 8000ac4:	3b01      	subs	r3, #1
 8000ac6:	60a3      	str	r3, [r4, #8]
 8000ac8:	6823      	ldr	r3, [r4, #0]
 8000aca:	1c5a      	adds	r2, r3, #1
 8000acc:	6022      	str	r2, [r4, #0]
 8000ace:	701e      	strb	r6, [r3, #0]
 8000ad0:	6963      	ldr	r3, [r4, #20]
 8000ad2:	3001      	adds	r0, #1
 8000ad4:	4283      	cmp	r3, r0
 8000ad6:	d004      	beq.n	8000ae2 <__swbuf_r+0x62>
 8000ad8:	89a3      	ldrh	r3, [r4, #12]
 8000ada:	07db      	lsls	r3, r3, #31
 8000adc:	d519      	bpl.n	8000b12 <__swbuf_r+0x92>
 8000ade:	2e0a      	cmp	r6, #10
 8000ae0:	d117      	bne.n	8000b12 <__swbuf_r+0x92>
 8000ae2:	4621      	mov	r1, r4
 8000ae4:	4628      	mov	r0, r5
 8000ae6:	f000 f911 	bl	8000d0c <_fflush_r>
 8000aea:	b190      	cbz	r0, 8000b12 <__swbuf_r+0x92>
 8000aec:	e00f      	b.n	8000b0e <__swbuf_r+0x8e>
 8000aee:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <__swbuf_r+0x9c>)
 8000af0:	429c      	cmp	r4, r3
 8000af2:	d101      	bne.n	8000af8 <__swbuf_r+0x78>
 8000af4:	68ac      	ldr	r4, [r5, #8]
 8000af6:	e7d0      	b.n	8000a9a <__swbuf_r+0x1a>
 8000af8:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <__swbuf_r+0xa0>)
 8000afa:	429c      	cmp	r4, r3
 8000afc:	bf08      	it	eq
 8000afe:	68ec      	ldreq	r4, [r5, #12]
 8000b00:	e7cb      	b.n	8000a9a <__swbuf_r+0x1a>
 8000b02:	4621      	mov	r1, r4
 8000b04:	4628      	mov	r0, r5
 8000b06:	f000 f80d 	bl	8000b24 <__swsetup_r>
 8000b0a:	2800      	cmp	r0, #0
 8000b0c:	d0cc      	beq.n	8000aa8 <__swbuf_r+0x28>
 8000b0e:	f04f 37ff 	mov.w	r7, #4294967295
 8000b12:	4638      	mov	r0, r7
 8000b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b16:	bf00      	nop
 8000b18:	08001318 	.word	0x08001318
 8000b1c:	08001338 	.word	0x08001338
 8000b20:	080012f8 	.word	0x080012f8

08000b24 <__swsetup_r>:
 8000b24:	4b32      	ldr	r3, [pc, #200]	; (8000bf0 <__swsetup_r+0xcc>)
 8000b26:	b570      	push	{r4, r5, r6, lr}
 8000b28:	681d      	ldr	r5, [r3, #0]
 8000b2a:	4606      	mov	r6, r0
 8000b2c:	460c      	mov	r4, r1
 8000b2e:	b125      	cbz	r5, 8000b3a <__swsetup_r+0x16>
 8000b30:	69ab      	ldr	r3, [r5, #24]
 8000b32:	b913      	cbnz	r3, 8000b3a <__swsetup_r+0x16>
 8000b34:	4628      	mov	r0, r5
 8000b36:	f000 f953 	bl	8000de0 <__sinit>
 8000b3a:	4b2e      	ldr	r3, [pc, #184]	; (8000bf4 <__swsetup_r+0xd0>)
 8000b3c:	429c      	cmp	r4, r3
 8000b3e:	d10f      	bne.n	8000b60 <__swsetup_r+0x3c>
 8000b40:	686c      	ldr	r4, [r5, #4]
 8000b42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b46:	b29a      	uxth	r2, r3
 8000b48:	0715      	lsls	r5, r2, #28
 8000b4a:	d42c      	bmi.n	8000ba6 <__swsetup_r+0x82>
 8000b4c:	06d0      	lsls	r0, r2, #27
 8000b4e:	d411      	bmi.n	8000b74 <__swsetup_r+0x50>
 8000b50:	2209      	movs	r2, #9
 8000b52:	6032      	str	r2, [r6, #0]
 8000b54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b58:	81a3      	strh	r3, [r4, #12]
 8000b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8000b5e:	e03e      	b.n	8000bde <__swsetup_r+0xba>
 8000b60:	4b25      	ldr	r3, [pc, #148]	; (8000bf8 <__swsetup_r+0xd4>)
 8000b62:	429c      	cmp	r4, r3
 8000b64:	d101      	bne.n	8000b6a <__swsetup_r+0x46>
 8000b66:	68ac      	ldr	r4, [r5, #8]
 8000b68:	e7eb      	b.n	8000b42 <__swsetup_r+0x1e>
 8000b6a:	4b24      	ldr	r3, [pc, #144]	; (8000bfc <__swsetup_r+0xd8>)
 8000b6c:	429c      	cmp	r4, r3
 8000b6e:	bf08      	it	eq
 8000b70:	68ec      	ldreq	r4, [r5, #12]
 8000b72:	e7e6      	b.n	8000b42 <__swsetup_r+0x1e>
 8000b74:	0751      	lsls	r1, r2, #29
 8000b76:	d512      	bpl.n	8000b9e <__swsetup_r+0x7a>
 8000b78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000b7a:	b141      	cbz	r1, 8000b8e <__swsetup_r+0x6a>
 8000b7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000b80:	4299      	cmp	r1, r3
 8000b82:	d002      	beq.n	8000b8a <__swsetup_r+0x66>
 8000b84:	4630      	mov	r0, r6
 8000b86:	f000 fa19 	bl	8000fbc <_free_r>
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	6363      	str	r3, [r4, #52]	; 0x34
 8000b8e:	89a3      	ldrh	r3, [r4, #12]
 8000b90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000b94:	81a3      	strh	r3, [r4, #12]
 8000b96:	2300      	movs	r3, #0
 8000b98:	6063      	str	r3, [r4, #4]
 8000b9a:	6923      	ldr	r3, [r4, #16]
 8000b9c:	6023      	str	r3, [r4, #0]
 8000b9e:	89a3      	ldrh	r3, [r4, #12]
 8000ba0:	f043 0308 	orr.w	r3, r3, #8
 8000ba4:	81a3      	strh	r3, [r4, #12]
 8000ba6:	6923      	ldr	r3, [r4, #16]
 8000ba8:	b94b      	cbnz	r3, 8000bbe <__swsetup_r+0x9a>
 8000baa:	89a3      	ldrh	r3, [r4, #12]
 8000bac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000bb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bb4:	d003      	beq.n	8000bbe <__swsetup_r+0x9a>
 8000bb6:	4621      	mov	r1, r4
 8000bb8:	4630      	mov	r0, r6
 8000bba:	f000 f9bf 	bl	8000f3c <__smakebuf_r>
 8000bbe:	89a2      	ldrh	r2, [r4, #12]
 8000bc0:	f012 0301 	ands.w	r3, r2, #1
 8000bc4:	d00c      	beq.n	8000be0 <__swsetup_r+0xbc>
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60a3      	str	r3, [r4, #8]
 8000bca:	6963      	ldr	r3, [r4, #20]
 8000bcc:	425b      	negs	r3, r3
 8000bce:	61a3      	str	r3, [r4, #24]
 8000bd0:	6923      	ldr	r3, [r4, #16]
 8000bd2:	b953      	cbnz	r3, 8000bea <__swsetup_r+0xc6>
 8000bd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000bd8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8000bdc:	d1ba      	bne.n	8000b54 <__swsetup_r+0x30>
 8000bde:	bd70      	pop	{r4, r5, r6, pc}
 8000be0:	0792      	lsls	r2, r2, #30
 8000be2:	bf58      	it	pl
 8000be4:	6963      	ldrpl	r3, [r4, #20]
 8000be6:	60a3      	str	r3, [r4, #8]
 8000be8:	e7f2      	b.n	8000bd0 <__swsetup_r+0xac>
 8000bea:	2000      	movs	r0, #0
 8000bec:	e7f7      	b.n	8000bde <__swsetup_r+0xba>
 8000bee:	bf00      	nop
 8000bf0:	20000008 	.word	0x20000008
 8000bf4:	08001318 	.word	0x08001318
 8000bf8:	08001338 	.word	0x08001338
 8000bfc:	080012f8 	.word	0x080012f8

08000c00 <__sflush_r>:
 8000c00:	898a      	ldrh	r2, [r1, #12]
 8000c02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c06:	4605      	mov	r5, r0
 8000c08:	0710      	lsls	r0, r2, #28
 8000c0a:	460c      	mov	r4, r1
 8000c0c:	d458      	bmi.n	8000cc0 <__sflush_r+0xc0>
 8000c0e:	684b      	ldr	r3, [r1, #4]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	dc05      	bgt.n	8000c20 <__sflush_r+0x20>
 8000c14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	dc02      	bgt.n	8000c20 <__sflush_r+0x20>
 8000c1a:	2000      	movs	r0, #0
 8000c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000c22:	2e00      	cmp	r6, #0
 8000c24:	d0f9      	beq.n	8000c1a <__sflush_r+0x1a>
 8000c26:	2300      	movs	r3, #0
 8000c28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000c2c:	682f      	ldr	r7, [r5, #0]
 8000c2e:	6a21      	ldr	r1, [r4, #32]
 8000c30:	602b      	str	r3, [r5, #0]
 8000c32:	d032      	beq.n	8000c9a <__sflush_r+0x9a>
 8000c34:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000c36:	89a3      	ldrh	r3, [r4, #12]
 8000c38:	075a      	lsls	r2, r3, #29
 8000c3a:	d505      	bpl.n	8000c48 <__sflush_r+0x48>
 8000c3c:	6863      	ldr	r3, [r4, #4]
 8000c3e:	1ac0      	subs	r0, r0, r3
 8000c40:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000c42:	b10b      	cbz	r3, 8000c48 <__sflush_r+0x48>
 8000c44:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c46:	1ac0      	subs	r0, r0, r3
 8000c48:	2300      	movs	r3, #0
 8000c4a:	4602      	mov	r2, r0
 8000c4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000c4e:	6a21      	ldr	r1, [r4, #32]
 8000c50:	4628      	mov	r0, r5
 8000c52:	47b0      	blx	r6
 8000c54:	1c43      	adds	r3, r0, #1
 8000c56:	89a3      	ldrh	r3, [r4, #12]
 8000c58:	d106      	bne.n	8000c68 <__sflush_r+0x68>
 8000c5a:	6829      	ldr	r1, [r5, #0]
 8000c5c:	291d      	cmp	r1, #29
 8000c5e:	d848      	bhi.n	8000cf2 <__sflush_r+0xf2>
 8000c60:	4a29      	ldr	r2, [pc, #164]	; (8000d08 <__sflush_r+0x108>)
 8000c62:	40ca      	lsrs	r2, r1
 8000c64:	07d6      	lsls	r6, r2, #31
 8000c66:	d544      	bpl.n	8000cf2 <__sflush_r+0xf2>
 8000c68:	2200      	movs	r2, #0
 8000c6a:	6062      	str	r2, [r4, #4]
 8000c6c:	04d9      	lsls	r1, r3, #19
 8000c6e:	6922      	ldr	r2, [r4, #16]
 8000c70:	6022      	str	r2, [r4, #0]
 8000c72:	d504      	bpl.n	8000c7e <__sflush_r+0x7e>
 8000c74:	1c42      	adds	r2, r0, #1
 8000c76:	d101      	bne.n	8000c7c <__sflush_r+0x7c>
 8000c78:	682b      	ldr	r3, [r5, #0]
 8000c7a:	b903      	cbnz	r3, 8000c7e <__sflush_r+0x7e>
 8000c7c:	6560      	str	r0, [r4, #84]	; 0x54
 8000c7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000c80:	602f      	str	r7, [r5, #0]
 8000c82:	2900      	cmp	r1, #0
 8000c84:	d0c9      	beq.n	8000c1a <__sflush_r+0x1a>
 8000c86:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000c8a:	4299      	cmp	r1, r3
 8000c8c:	d002      	beq.n	8000c94 <__sflush_r+0x94>
 8000c8e:	4628      	mov	r0, r5
 8000c90:	f000 f994 	bl	8000fbc <_free_r>
 8000c94:	2000      	movs	r0, #0
 8000c96:	6360      	str	r0, [r4, #52]	; 0x34
 8000c98:	e7c0      	b.n	8000c1c <__sflush_r+0x1c>
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	4628      	mov	r0, r5
 8000c9e:	47b0      	blx	r6
 8000ca0:	1c41      	adds	r1, r0, #1
 8000ca2:	d1c8      	bne.n	8000c36 <__sflush_r+0x36>
 8000ca4:	682b      	ldr	r3, [r5, #0]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d0c5      	beq.n	8000c36 <__sflush_r+0x36>
 8000caa:	2b1d      	cmp	r3, #29
 8000cac:	d001      	beq.n	8000cb2 <__sflush_r+0xb2>
 8000cae:	2b16      	cmp	r3, #22
 8000cb0:	d101      	bne.n	8000cb6 <__sflush_r+0xb6>
 8000cb2:	602f      	str	r7, [r5, #0]
 8000cb4:	e7b1      	b.n	8000c1a <__sflush_r+0x1a>
 8000cb6:	89a3      	ldrh	r3, [r4, #12]
 8000cb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cbc:	81a3      	strh	r3, [r4, #12]
 8000cbe:	e7ad      	b.n	8000c1c <__sflush_r+0x1c>
 8000cc0:	690f      	ldr	r7, [r1, #16]
 8000cc2:	2f00      	cmp	r7, #0
 8000cc4:	d0a9      	beq.n	8000c1a <__sflush_r+0x1a>
 8000cc6:	0793      	lsls	r3, r2, #30
 8000cc8:	680e      	ldr	r6, [r1, #0]
 8000cca:	bf08      	it	eq
 8000ccc:	694b      	ldreq	r3, [r1, #20]
 8000cce:	600f      	str	r7, [r1, #0]
 8000cd0:	bf18      	it	ne
 8000cd2:	2300      	movne	r3, #0
 8000cd4:	eba6 0807 	sub.w	r8, r6, r7
 8000cd8:	608b      	str	r3, [r1, #8]
 8000cda:	f1b8 0f00 	cmp.w	r8, #0
 8000cde:	dd9c      	ble.n	8000c1a <__sflush_r+0x1a>
 8000ce0:	4643      	mov	r3, r8
 8000ce2:	463a      	mov	r2, r7
 8000ce4:	6a21      	ldr	r1, [r4, #32]
 8000ce6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000ce8:	4628      	mov	r0, r5
 8000cea:	47b0      	blx	r6
 8000cec:	2800      	cmp	r0, #0
 8000cee:	dc06      	bgt.n	8000cfe <__sflush_r+0xfe>
 8000cf0:	89a3      	ldrh	r3, [r4, #12]
 8000cf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cf6:	81a3      	strh	r3, [r4, #12]
 8000cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cfc:	e78e      	b.n	8000c1c <__sflush_r+0x1c>
 8000cfe:	4407      	add	r7, r0
 8000d00:	eba8 0800 	sub.w	r8, r8, r0
 8000d04:	e7e9      	b.n	8000cda <__sflush_r+0xda>
 8000d06:	bf00      	nop
 8000d08:	20400001 	.word	0x20400001

08000d0c <_fflush_r>:
 8000d0c:	b538      	push	{r3, r4, r5, lr}
 8000d0e:	690b      	ldr	r3, [r1, #16]
 8000d10:	4605      	mov	r5, r0
 8000d12:	460c      	mov	r4, r1
 8000d14:	b1db      	cbz	r3, 8000d4e <_fflush_r+0x42>
 8000d16:	b118      	cbz	r0, 8000d20 <_fflush_r+0x14>
 8000d18:	6983      	ldr	r3, [r0, #24]
 8000d1a:	b90b      	cbnz	r3, 8000d20 <_fflush_r+0x14>
 8000d1c:	f000 f860 	bl	8000de0 <__sinit>
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <_fflush_r+0x48>)
 8000d22:	429c      	cmp	r4, r3
 8000d24:	d109      	bne.n	8000d3a <_fflush_r+0x2e>
 8000d26:	686c      	ldr	r4, [r5, #4]
 8000d28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d2c:	b17b      	cbz	r3, 8000d4e <_fflush_r+0x42>
 8000d2e:	4621      	mov	r1, r4
 8000d30:	4628      	mov	r0, r5
 8000d32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d36:	f7ff bf63 	b.w	8000c00 <__sflush_r>
 8000d3a:	4b07      	ldr	r3, [pc, #28]	; (8000d58 <_fflush_r+0x4c>)
 8000d3c:	429c      	cmp	r4, r3
 8000d3e:	d101      	bne.n	8000d44 <_fflush_r+0x38>
 8000d40:	68ac      	ldr	r4, [r5, #8]
 8000d42:	e7f1      	b.n	8000d28 <_fflush_r+0x1c>
 8000d44:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <_fflush_r+0x50>)
 8000d46:	429c      	cmp	r4, r3
 8000d48:	bf08      	it	eq
 8000d4a:	68ec      	ldreq	r4, [r5, #12]
 8000d4c:	e7ec      	b.n	8000d28 <_fflush_r+0x1c>
 8000d4e:	2000      	movs	r0, #0
 8000d50:	bd38      	pop	{r3, r4, r5, pc}
 8000d52:	bf00      	nop
 8000d54:	08001318 	.word	0x08001318
 8000d58:	08001338 	.word	0x08001338
 8000d5c:	080012f8 	.word	0x080012f8

08000d60 <std>:
 8000d60:	2300      	movs	r3, #0
 8000d62:	b510      	push	{r4, lr}
 8000d64:	4604      	mov	r4, r0
 8000d66:	e9c0 3300 	strd	r3, r3, [r0]
 8000d6a:	6083      	str	r3, [r0, #8]
 8000d6c:	8181      	strh	r1, [r0, #12]
 8000d6e:	6643      	str	r3, [r0, #100]	; 0x64
 8000d70:	81c2      	strh	r2, [r0, #14]
 8000d72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000d76:	6183      	str	r3, [r0, #24]
 8000d78:	4619      	mov	r1, r3
 8000d7a:	2208      	movs	r2, #8
 8000d7c:	305c      	adds	r0, #92	; 0x5c
 8000d7e:	f7ff fe13 	bl	80009a8 <memset>
 8000d82:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <std+0x38>)
 8000d84:	6263      	str	r3, [r4, #36]	; 0x24
 8000d86:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <std+0x3c>)
 8000d88:	62a3      	str	r3, [r4, #40]	; 0x28
 8000d8a:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <std+0x40>)
 8000d8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000d8e:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <std+0x44>)
 8000d90:	6224      	str	r4, [r4, #32]
 8000d92:	6323      	str	r3, [r4, #48]	; 0x30
 8000d94:	bd10      	pop	{r4, pc}
 8000d96:	bf00      	nop
 8000d98:	0800112d 	.word	0x0800112d
 8000d9c:	0800114f 	.word	0x0800114f
 8000da0:	08001187 	.word	0x08001187
 8000da4:	080011ab 	.word	0x080011ab

08000da8 <_cleanup_r>:
 8000da8:	4901      	ldr	r1, [pc, #4]	; (8000db0 <_cleanup_r+0x8>)
 8000daa:	f000 b885 	b.w	8000eb8 <_fwalk_reent>
 8000dae:	bf00      	nop
 8000db0:	08000d0d 	.word	0x08000d0d

08000db4 <__sfmoreglue>:
 8000db4:	b570      	push	{r4, r5, r6, lr}
 8000db6:	1e4a      	subs	r2, r1, #1
 8000db8:	2568      	movs	r5, #104	; 0x68
 8000dba:	4355      	muls	r5, r2
 8000dbc:	460e      	mov	r6, r1
 8000dbe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000dc2:	f000 f949 	bl	8001058 <_malloc_r>
 8000dc6:	4604      	mov	r4, r0
 8000dc8:	b140      	cbz	r0, 8000ddc <__sfmoreglue+0x28>
 8000dca:	2100      	movs	r1, #0
 8000dcc:	e9c0 1600 	strd	r1, r6, [r0]
 8000dd0:	300c      	adds	r0, #12
 8000dd2:	60a0      	str	r0, [r4, #8]
 8000dd4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000dd8:	f7ff fde6 	bl	80009a8 <memset>
 8000ddc:	4620      	mov	r0, r4
 8000dde:	bd70      	pop	{r4, r5, r6, pc}

08000de0 <__sinit>:
 8000de0:	6983      	ldr	r3, [r0, #24]
 8000de2:	b510      	push	{r4, lr}
 8000de4:	4604      	mov	r4, r0
 8000de6:	bb33      	cbnz	r3, 8000e36 <__sinit+0x56>
 8000de8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8000dec:	6503      	str	r3, [r0, #80]	; 0x50
 8000dee:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <__sinit+0x58>)
 8000df0:	4a12      	ldr	r2, [pc, #72]	; (8000e3c <__sinit+0x5c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	6282      	str	r2, [r0, #40]	; 0x28
 8000df6:	4298      	cmp	r0, r3
 8000df8:	bf04      	itt	eq
 8000dfa:	2301      	moveq	r3, #1
 8000dfc:	6183      	streq	r3, [r0, #24]
 8000dfe:	f000 f81f 	bl	8000e40 <__sfp>
 8000e02:	6060      	str	r0, [r4, #4]
 8000e04:	4620      	mov	r0, r4
 8000e06:	f000 f81b 	bl	8000e40 <__sfp>
 8000e0a:	60a0      	str	r0, [r4, #8]
 8000e0c:	4620      	mov	r0, r4
 8000e0e:	f000 f817 	bl	8000e40 <__sfp>
 8000e12:	2200      	movs	r2, #0
 8000e14:	60e0      	str	r0, [r4, #12]
 8000e16:	2104      	movs	r1, #4
 8000e18:	6860      	ldr	r0, [r4, #4]
 8000e1a:	f7ff ffa1 	bl	8000d60 <std>
 8000e1e:	2201      	movs	r2, #1
 8000e20:	2109      	movs	r1, #9
 8000e22:	68a0      	ldr	r0, [r4, #8]
 8000e24:	f7ff ff9c 	bl	8000d60 <std>
 8000e28:	2202      	movs	r2, #2
 8000e2a:	2112      	movs	r1, #18
 8000e2c:	68e0      	ldr	r0, [r4, #12]
 8000e2e:	f7ff ff97 	bl	8000d60 <std>
 8000e32:	2301      	movs	r3, #1
 8000e34:	61a3      	str	r3, [r4, #24]
 8000e36:	bd10      	pop	{r4, pc}
 8000e38:	080012f4 	.word	0x080012f4
 8000e3c:	08000da9 	.word	0x08000da9

08000e40 <__sfp>:
 8000e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e42:	4b1b      	ldr	r3, [pc, #108]	; (8000eb0 <__sfp+0x70>)
 8000e44:	681e      	ldr	r6, [r3, #0]
 8000e46:	69b3      	ldr	r3, [r6, #24]
 8000e48:	4607      	mov	r7, r0
 8000e4a:	b913      	cbnz	r3, 8000e52 <__sfp+0x12>
 8000e4c:	4630      	mov	r0, r6
 8000e4e:	f7ff ffc7 	bl	8000de0 <__sinit>
 8000e52:	3648      	adds	r6, #72	; 0x48
 8000e54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000e58:	3b01      	subs	r3, #1
 8000e5a:	d503      	bpl.n	8000e64 <__sfp+0x24>
 8000e5c:	6833      	ldr	r3, [r6, #0]
 8000e5e:	b133      	cbz	r3, 8000e6e <__sfp+0x2e>
 8000e60:	6836      	ldr	r6, [r6, #0]
 8000e62:	e7f7      	b.n	8000e54 <__sfp+0x14>
 8000e64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000e68:	b16d      	cbz	r5, 8000e86 <__sfp+0x46>
 8000e6a:	3468      	adds	r4, #104	; 0x68
 8000e6c:	e7f4      	b.n	8000e58 <__sfp+0x18>
 8000e6e:	2104      	movs	r1, #4
 8000e70:	4638      	mov	r0, r7
 8000e72:	f7ff ff9f 	bl	8000db4 <__sfmoreglue>
 8000e76:	6030      	str	r0, [r6, #0]
 8000e78:	2800      	cmp	r0, #0
 8000e7a:	d1f1      	bne.n	8000e60 <__sfp+0x20>
 8000e7c:	230c      	movs	r3, #12
 8000e7e:	603b      	str	r3, [r7, #0]
 8000e80:	4604      	mov	r4, r0
 8000e82:	4620      	mov	r0, r4
 8000e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e86:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <__sfp+0x74>)
 8000e88:	6665      	str	r5, [r4, #100]	; 0x64
 8000e8a:	e9c4 5500 	strd	r5, r5, [r4]
 8000e8e:	60a5      	str	r5, [r4, #8]
 8000e90:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8000e94:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8000e98:	2208      	movs	r2, #8
 8000e9a:	4629      	mov	r1, r5
 8000e9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000ea0:	f7ff fd82 	bl	80009a8 <memset>
 8000ea4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000ea8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000eac:	e7e9      	b.n	8000e82 <__sfp+0x42>
 8000eae:	bf00      	nop
 8000eb0:	080012f4 	.word	0x080012f4
 8000eb4:	ffff0001 	.word	0xffff0001

08000eb8 <_fwalk_reent>:
 8000eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ebc:	4680      	mov	r8, r0
 8000ebe:	4689      	mov	r9, r1
 8000ec0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000ec4:	2600      	movs	r6, #0
 8000ec6:	b914      	cbnz	r4, 8000ece <_fwalk_reent+0x16>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ece:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8000ed2:	3f01      	subs	r7, #1
 8000ed4:	d501      	bpl.n	8000eda <_fwalk_reent+0x22>
 8000ed6:	6824      	ldr	r4, [r4, #0]
 8000ed8:	e7f5      	b.n	8000ec6 <_fwalk_reent+0xe>
 8000eda:	89ab      	ldrh	r3, [r5, #12]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d907      	bls.n	8000ef0 <_fwalk_reent+0x38>
 8000ee0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	d003      	beq.n	8000ef0 <_fwalk_reent+0x38>
 8000ee8:	4629      	mov	r1, r5
 8000eea:	4640      	mov	r0, r8
 8000eec:	47c8      	blx	r9
 8000eee:	4306      	orrs	r6, r0
 8000ef0:	3568      	adds	r5, #104	; 0x68
 8000ef2:	e7ee      	b.n	8000ed2 <_fwalk_reent+0x1a>

08000ef4 <__swhatbuf_r>:
 8000ef4:	b570      	push	{r4, r5, r6, lr}
 8000ef6:	460e      	mov	r6, r1
 8000ef8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000efc:	2900      	cmp	r1, #0
 8000efe:	b096      	sub	sp, #88	; 0x58
 8000f00:	4614      	mov	r4, r2
 8000f02:	461d      	mov	r5, r3
 8000f04:	da07      	bge.n	8000f16 <__swhatbuf_r+0x22>
 8000f06:	2300      	movs	r3, #0
 8000f08:	602b      	str	r3, [r5, #0]
 8000f0a:	89b3      	ldrh	r3, [r6, #12]
 8000f0c:	061a      	lsls	r2, r3, #24
 8000f0e:	d410      	bmi.n	8000f32 <__swhatbuf_r+0x3e>
 8000f10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f14:	e00e      	b.n	8000f34 <__swhatbuf_r+0x40>
 8000f16:	466a      	mov	r2, sp
 8000f18:	f000 f96e 	bl	80011f8 <_fstat_r>
 8000f1c:	2800      	cmp	r0, #0
 8000f1e:	dbf2      	blt.n	8000f06 <__swhatbuf_r+0x12>
 8000f20:	9a01      	ldr	r2, [sp, #4]
 8000f22:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000f26:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000f2a:	425a      	negs	r2, r3
 8000f2c:	415a      	adcs	r2, r3
 8000f2e:	602a      	str	r2, [r5, #0]
 8000f30:	e7ee      	b.n	8000f10 <__swhatbuf_r+0x1c>
 8000f32:	2340      	movs	r3, #64	; 0x40
 8000f34:	2000      	movs	r0, #0
 8000f36:	6023      	str	r3, [r4, #0]
 8000f38:	b016      	add	sp, #88	; 0x58
 8000f3a:	bd70      	pop	{r4, r5, r6, pc}

08000f3c <__smakebuf_r>:
 8000f3c:	898b      	ldrh	r3, [r1, #12]
 8000f3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000f40:	079d      	lsls	r5, r3, #30
 8000f42:	4606      	mov	r6, r0
 8000f44:	460c      	mov	r4, r1
 8000f46:	d507      	bpl.n	8000f58 <__smakebuf_r+0x1c>
 8000f48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000f4c:	6023      	str	r3, [r4, #0]
 8000f4e:	6123      	str	r3, [r4, #16]
 8000f50:	2301      	movs	r3, #1
 8000f52:	6163      	str	r3, [r4, #20]
 8000f54:	b002      	add	sp, #8
 8000f56:	bd70      	pop	{r4, r5, r6, pc}
 8000f58:	ab01      	add	r3, sp, #4
 8000f5a:	466a      	mov	r2, sp
 8000f5c:	f7ff ffca 	bl	8000ef4 <__swhatbuf_r>
 8000f60:	9900      	ldr	r1, [sp, #0]
 8000f62:	4605      	mov	r5, r0
 8000f64:	4630      	mov	r0, r6
 8000f66:	f000 f877 	bl	8001058 <_malloc_r>
 8000f6a:	b948      	cbnz	r0, 8000f80 <__smakebuf_r+0x44>
 8000f6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f70:	059a      	lsls	r2, r3, #22
 8000f72:	d4ef      	bmi.n	8000f54 <__smakebuf_r+0x18>
 8000f74:	f023 0303 	bic.w	r3, r3, #3
 8000f78:	f043 0302 	orr.w	r3, r3, #2
 8000f7c:	81a3      	strh	r3, [r4, #12]
 8000f7e:	e7e3      	b.n	8000f48 <__smakebuf_r+0xc>
 8000f80:	4b0d      	ldr	r3, [pc, #52]	; (8000fb8 <__smakebuf_r+0x7c>)
 8000f82:	62b3      	str	r3, [r6, #40]	; 0x28
 8000f84:	89a3      	ldrh	r3, [r4, #12]
 8000f86:	6020      	str	r0, [r4, #0]
 8000f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f8c:	81a3      	strh	r3, [r4, #12]
 8000f8e:	9b00      	ldr	r3, [sp, #0]
 8000f90:	6163      	str	r3, [r4, #20]
 8000f92:	9b01      	ldr	r3, [sp, #4]
 8000f94:	6120      	str	r0, [r4, #16]
 8000f96:	b15b      	cbz	r3, 8000fb0 <__smakebuf_r+0x74>
 8000f98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f9c:	4630      	mov	r0, r6
 8000f9e:	f000 f93d 	bl	800121c <_isatty_r>
 8000fa2:	b128      	cbz	r0, 8000fb0 <__smakebuf_r+0x74>
 8000fa4:	89a3      	ldrh	r3, [r4, #12]
 8000fa6:	f023 0303 	bic.w	r3, r3, #3
 8000faa:	f043 0301 	orr.w	r3, r3, #1
 8000fae:	81a3      	strh	r3, [r4, #12]
 8000fb0:	89a3      	ldrh	r3, [r4, #12]
 8000fb2:	431d      	orrs	r5, r3
 8000fb4:	81a5      	strh	r5, [r4, #12]
 8000fb6:	e7cd      	b.n	8000f54 <__smakebuf_r+0x18>
 8000fb8:	08000da9 	.word	0x08000da9

08000fbc <_free_r>:
 8000fbc:	b538      	push	{r3, r4, r5, lr}
 8000fbe:	4605      	mov	r5, r0
 8000fc0:	2900      	cmp	r1, #0
 8000fc2:	d045      	beq.n	8001050 <_free_r+0x94>
 8000fc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000fc8:	1f0c      	subs	r4, r1, #4
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	bfb8      	it	lt
 8000fce:	18e4      	addlt	r4, r4, r3
 8000fd0:	f000 f946 	bl	8001260 <__malloc_lock>
 8000fd4:	4a1f      	ldr	r2, [pc, #124]	; (8001054 <_free_r+0x98>)
 8000fd6:	6813      	ldr	r3, [r2, #0]
 8000fd8:	4610      	mov	r0, r2
 8000fda:	b933      	cbnz	r3, 8000fea <_free_r+0x2e>
 8000fdc:	6063      	str	r3, [r4, #4]
 8000fde:	6014      	str	r4, [r2, #0]
 8000fe0:	4628      	mov	r0, r5
 8000fe2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fe6:	f000 b93c 	b.w	8001262 <__malloc_unlock>
 8000fea:	42a3      	cmp	r3, r4
 8000fec:	d90c      	bls.n	8001008 <_free_r+0x4c>
 8000fee:	6821      	ldr	r1, [r4, #0]
 8000ff0:	1862      	adds	r2, r4, r1
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	bf04      	itt	eq
 8000ff6:	681a      	ldreq	r2, [r3, #0]
 8000ff8:	685b      	ldreq	r3, [r3, #4]
 8000ffa:	6063      	str	r3, [r4, #4]
 8000ffc:	bf04      	itt	eq
 8000ffe:	1852      	addeq	r2, r2, r1
 8001000:	6022      	streq	r2, [r4, #0]
 8001002:	6004      	str	r4, [r0, #0]
 8001004:	e7ec      	b.n	8000fe0 <_free_r+0x24>
 8001006:	4613      	mov	r3, r2
 8001008:	685a      	ldr	r2, [r3, #4]
 800100a:	b10a      	cbz	r2, 8001010 <_free_r+0x54>
 800100c:	42a2      	cmp	r2, r4
 800100e:	d9fa      	bls.n	8001006 <_free_r+0x4a>
 8001010:	6819      	ldr	r1, [r3, #0]
 8001012:	1858      	adds	r0, r3, r1
 8001014:	42a0      	cmp	r0, r4
 8001016:	d10b      	bne.n	8001030 <_free_r+0x74>
 8001018:	6820      	ldr	r0, [r4, #0]
 800101a:	4401      	add	r1, r0
 800101c:	1858      	adds	r0, r3, r1
 800101e:	4282      	cmp	r2, r0
 8001020:	6019      	str	r1, [r3, #0]
 8001022:	d1dd      	bne.n	8000fe0 <_free_r+0x24>
 8001024:	6810      	ldr	r0, [r2, #0]
 8001026:	6852      	ldr	r2, [r2, #4]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	4401      	add	r1, r0
 800102c:	6019      	str	r1, [r3, #0]
 800102e:	e7d7      	b.n	8000fe0 <_free_r+0x24>
 8001030:	d902      	bls.n	8001038 <_free_r+0x7c>
 8001032:	230c      	movs	r3, #12
 8001034:	602b      	str	r3, [r5, #0]
 8001036:	e7d3      	b.n	8000fe0 <_free_r+0x24>
 8001038:	6820      	ldr	r0, [r4, #0]
 800103a:	1821      	adds	r1, r4, r0
 800103c:	428a      	cmp	r2, r1
 800103e:	bf04      	itt	eq
 8001040:	6811      	ldreq	r1, [r2, #0]
 8001042:	6852      	ldreq	r2, [r2, #4]
 8001044:	6062      	str	r2, [r4, #4]
 8001046:	bf04      	itt	eq
 8001048:	1809      	addeq	r1, r1, r0
 800104a:	6021      	streq	r1, [r4, #0]
 800104c:	605c      	str	r4, [r3, #4]
 800104e:	e7c7      	b.n	8000fe0 <_free_r+0x24>
 8001050:	bd38      	pop	{r3, r4, r5, pc}
 8001052:	bf00      	nop
 8001054:	20000090 	.word	0x20000090

08001058 <_malloc_r>:
 8001058:	b570      	push	{r4, r5, r6, lr}
 800105a:	1ccd      	adds	r5, r1, #3
 800105c:	f025 0503 	bic.w	r5, r5, #3
 8001060:	3508      	adds	r5, #8
 8001062:	2d0c      	cmp	r5, #12
 8001064:	bf38      	it	cc
 8001066:	250c      	movcc	r5, #12
 8001068:	2d00      	cmp	r5, #0
 800106a:	4606      	mov	r6, r0
 800106c:	db01      	blt.n	8001072 <_malloc_r+0x1a>
 800106e:	42a9      	cmp	r1, r5
 8001070:	d903      	bls.n	800107a <_malloc_r+0x22>
 8001072:	230c      	movs	r3, #12
 8001074:	6033      	str	r3, [r6, #0]
 8001076:	2000      	movs	r0, #0
 8001078:	bd70      	pop	{r4, r5, r6, pc}
 800107a:	f000 f8f1 	bl	8001260 <__malloc_lock>
 800107e:	4a21      	ldr	r2, [pc, #132]	; (8001104 <_malloc_r+0xac>)
 8001080:	6814      	ldr	r4, [r2, #0]
 8001082:	4621      	mov	r1, r4
 8001084:	b991      	cbnz	r1, 80010ac <_malloc_r+0x54>
 8001086:	4c20      	ldr	r4, [pc, #128]	; (8001108 <_malloc_r+0xb0>)
 8001088:	6823      	ldr	r3, [r4, #0]
 800108a:	b91b      	cbnz	r3, 8001094 <_malloc_r+0x3c>
 800108c:	4630      	mov	r0, r6
 800108e:	f000 f83d 	bl	800110c <_sbrk_r>
 8001092:	6020      	str	r0, [r4, #0]
 8001094:	4629      	mov	r1, r5
 8001096:	4630      	mov	r0, r6
 8001098:	f000 f838 	bl	800110c <_sbrk_r>
 800109c:	1c43      	adds	r3, r0, #1
 800109e:	d124      	bne.n	80010ea <_malloc_r+0x92>
 80010a0:	230c      	movs	r3, #12
 80010a2:	6033      	str	r3, [r6, #0]
 80010a4:	4630      	mov	r0, r6
 80010a6:	f000 f8dc 	bl	8001262 <__malloc_unlock>
 80010aa:	e7e4      	b.n	8001076 <_malloc_r+0x1e>
 80010ac:	680b      	ldr	r3, [r1, #0]
 80010ae:	1b5b      	subs	r3, r3, r5
 80010b0:	d418      	bmi.n	80010e4 <_malloc_r+0x8c>
 80010b2:	2b0b      	cmp	r3, #11
 80010b4:	d90f      	bls.n	80010d6 <_malloc_r+0x7e>
 80010b6:	600b      	str	r3, [r1, #0]
 80010b8:	50cd      	str	r5, [r1, r3]
 80010ba:	18cc      	adds	r4, r1, r3
 80010bc:	4630      	mov	r0, r6
 80010be:	f000 f8d0 	bl	8001262 <__malloc_unlock>
 80010c2:	f104 000b 	add.w	r0, r4, #11
 80010c6:	1d23      	adds	r3, r4, #4
 80010c8:	f020 0007 	bic.w	r0, r0, #7
 80010cc:	1ac3      	subs	r3, r0, r3
 80010ce:	d0d3      	beq.n	8001078 <_malloc_r+0x20>
 80010d0:	425a      	negs	r2, r3
 80010d2:	50e2      	str	r2, [r4, r3]
 80010d4:	e7d0      	b.n	8001078 <_malloc_r+0x20>
 80010d6:	428c      	cmp	r4, r1
 80010d8:	684b      	ldr	r3, [r1, #4]
 80010da:	bf16      	itet	ne
 80010dc:	6063      	strne	r3, [r4, #4]
 80010de:	6013      	streq	r3, [r2, #0]
 80010e0:	460c      	movne	r4, r1
 80010e2:	e7eb      	b.n	80010bc <_malloc_r+0x64>
 80010e4:	460c      	mov	r4, r1
 80010e6:	6849      	ldr	r1, [r1, #4]
 80010e8:	e7cc      	b.n	8001084 <_malloc_r+0x2c>
 80010ea:	1cc4      	adds	r4, r0, #3
 80010ec:	f024 0403 	bic.w	r4, r4, #3
 80010f0:	42a0      	cmp	r0, r4
 80010f2:	d005      	beq.n	8001100 <_malloc_r+0xa8>
 80010f4:	1a21      	subs	r1, r4, r0
 80010f6:	4630      	mov	r0, r6
 80010f8:	f000 f808 	bl	800110c <_sbrk_r>
 80010fc:	3001      	adds	r0, #1
 80010fe:	d0cf      	beq.n	80010a0 <_malloc_r+0x48>
 8001100:	6025      	str	r5, [r4, #0]
 8001102:	e7db      	b.n	80010bc <_malloc_r+0x64>
 8001104:	20000090 	.word	0x20000090
 8001108:	20000094 	.word	0x20000094

0800110c <_sbrk_r>:
 800110c:	b538      	push	{r3, r4, r5, lr}
 800110e:	4c06      	ldr	r4, [pc, #24]	; (8001128 <_sbrk_r+0x1c>)
 8001110:	2300      	movs	r3, #0
 8001112:	4605      	mov	r5, r0
 8001114:	4608      	mov	r0, r1
 8001116:	6023      	str	r3, [r4, #0]
 8001118:	f7ff fbbc 	bl	8000894 <_sbrk>
 800111c:	1c43      	adds	r3, r0, #1
 800111e:	d102      	bne.n	8001126 <_sbrk_r+0x1a>
 8001120:	6823      	ldr	r3, [r4, #0]
 8001122:	b103      	cbz	r3, 8001126 <_sbrk_r+0x1a>
 8001124:	602b      	str	r3, [r5, #0]
 8001126:	bd38      	pop	{r3, r4, r5, pc}
 8001128:	200000e8 	.word	0x200000e8

0800112c <__sread>:
 800112c:	b510      	push	{r4, lr}
 800112e:	460c      	mov	r4, r1
 8001130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001134:	f000 f896 	bl	8001264 <_read_r>
 8001138:	2800      	cmp	r0, #0
 800113a:	bfab      	itete	ge
 800113c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800113e:	89a3      	ldrhlt	r3, [r4, #12]
 8001140:	181b      	addge	r3, r3, r0
 8001142:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001146:	bfac      	ite	ge
 8001148:	6563      	strge	r3, [r4, #84]	; 0x54
 800114a:	81a3      	strhlt	r3, [r4, #12]
 800114c:	bd10      	pop	{r4, pc}

0800114e <__swrite>:
 800114e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001152:	461f      	mov	r7, r3
 8001154:	898b      	ldrh	r3, [r1, #12]
 8001156:	05db      	lsls	r3, r3, #23
 8001158:	4605      	mov	r5, r0
 800115a:	460c      	mov	r4, r1
 800115c:	4616      	mov	r6, r2
 800115e:	d505      	bpl.n	800116c <__swrite+0x1e>
 8001160:	2302      	movs	r3, #2
 8001162:	2200      	movs	r2, #0
 8001164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001168:	f000 f868 	bl	800123c <_lseek_r>
 800116c:	89a3      	ldrh	r3, [r4, #12]
 800116e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001172:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001176:	81a3      	strh	r3, [r4, #12]
 8001178:	4632      	mov	r2, r6
 800117a:	463b      	mov	r3, r7
 800117c:	4628      	mov	r0, r5
 800117e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001182:	f000 b817 	b.w	80011b4 <_write_r>

08001186 <__sseek>:
 8001186:	b510      	push	{r4, lr}
 8001188:	460c      	mov	r4, r1
 800118a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800118e:	f000 f855 	bl	800123c <_lseek_r>
 8001192:	1c43      	adds	r3, r0, #1
 8001194:	89a3      	ldrh	r3, [r4, #12]
 8001196:	bf15      	itete	ne
 8001198:	6560      	strne	r0, [r4, #84]	; 0x54
 800119a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800119e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80011a2:	81a3      	strheq	r3, [r4, #12]
 80011a4:	bf18      	it	ne
 80011a6:	81a3      	strhne	r3, [r4, #12]
 80011a8:	bd10      	pop	{r4, pc}

080011aa <__sclose>:
 80011aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011ae:	f000 b813 	b.w	80011d8 <_close_r>
	...

080011b4 <_write_r>:
 80011b4:	b538      	push	{r3, r4, r5, lr}
 80011b6:	4c07      	ldr	r4, [pc, #28]	; (80011d4 <_write_r+0x20>)
 80011b8:	4605      	mov	r5, r0
 80011ba:	4608      	mov	r0, r1
 80011bc:	4611      	mov	r1, r2
 80011be:	2200      	movs	r2, #0
 80011c0:	6022      	str	r2, [r4, #0]
 80011c2:	461a      	mov	r2, r3
 80011c4:	f7ff fb15 	bl	80007f2 <_write>
 80011c8:	1c43      	adds	r3, r0, #1
 80011ca:	d102      	bne.n	80011d2 <_write_r+0x1e>
 80011cc:	6823      	ldr	r3, [r4, #0]
 80011ce:	b103      	cbz	r3, 80011d2 <_write_r+0x1e>
 80011d0:	602b      	str	r3, [r5, #0]
 80011d2:	bd38      	pop	{r3, r4, r5, pc}
 80011d4:	200000e8 	.word	0x200000e8

080011d8 <_close_r>:
 80011d8:	b538      	push	{r3, r4, r5, lr}
 80011da:	4c06      	ldr	r4, [pc, #24]	; (80011f4 <_close_r+0x1c>)
 80011dc:	2300      	movs	r3, #0
 80011de:	4605      	mov	r5, r0
 80011e0:	4608      	mov	r0, r1
 80011e2:	6023      	str	r3, [r4, #0]
 80011e4:	f7ff fb21 	bl	800082a <_close>
 80011e8:	1c43      	adds	r3, r0, #1
 80011ea:	d102      	bne.n	80011f2 <_close_r+0x1a>
 80011ec:	6823      	ldr	r3, [r4, #0]
 80011ee:	b103      	cbz	r3, 80011f2 <_close_r+0x1a>
 80011f0:	602b      	str	r3, [r5, #0]
 80011f2:	bd38      	pop	{r3, r4, r5, pc}
 80011f4:	200000e8 	.word	0x200000e8

080011f8 <_fstat_r>:
 80011f8:	b538      	push	{r3, r4, r5, lr}
 80011fa:	4c07      	ldr	r4, [pc, #28]	; (8001218 <_fstat_r+0x20>)
 80011fc:	2300      	movs	r3, #0
 80011fe:	4605      	mov	r5, r0
 8001200:	4608      	mov	r0, r1
 8001202:	4611      	mov	r1, r2
 8001204:	6023      	str	r3, [r4, #0]
 8001206:	f7ff fb1c 	bl	8000842 <_fstat>
 800120a:	1c43      	adds	r3, r0, #1
 800120c:	d102      	bne.n	8001214 <_fstat_r+0x1c>
 800120e:	6823      	ldr	r3, [r4, #0]
 8001210:	b103      	cbz	r3, 8001214 <_fstat_r+0x1c>
 8001212:	602b      	str	r3, [r5, #0]
 8001214:	bd38      	pop	{r3, r4, r5, pc}
 8001216:	bf00      	nop
 8001218:	200000e8 	.word	0x200000e8

0800121c <_isatty_r>:
 800121c:	b538      	push	{r3, r4, r5, lr}
 800121e:	4c06      	ldr	r4, [pc, #24]	; (8001238 <_isatty_r+0x1c>)
 8001220:	2300      	movs	r3, #0
 8001222:	4605      	mov	r5, r0
 8001224:	4608      	mov	r0, r1
 8001226:	6023      	str	r3, [r4, #0]
 8001228:	f7ff fb1b 	bl	8000862 <_isatty>
 800122c:	1c43      	adds	r3, r0, #1
 800122e:	d102      	bne.n	8001236 <_isatty_r+0x1a>
 8001230:	6823      	ldr	r3, [r4, #0]
 8001232:	b103      	cbz	r3, 8001236 <_isatty_r+0x1a>
 8001234:	602b      	str	r3, [r5, #0]
 8001236:	bd38      	pop	{r3, r4, r5, pc}
 8001238:	200000e8 	.word	0x200000e8

0800123c <_lseek_r>:
 800123c:	b538      	push	{r3, r4, r5, lr}
 800123e:	4c07      	ldr	r4, [pc, #28]	; (800125c <_lseek_r+0x20>)
 8001240:	4605      	mov	r5, r0
 8001242:	4608      	mov	r0, r1
 8001244:	4611      	mov	r1, r2
 8001246:	2200      	movs	r2, #0
 8001248:	6022      	str	r2, [r4, #0]
 800124a:	461a      	mov	r2, r3
 800124c:	f7ff fb14 	bl	8000878 <_lseek>
 8001250:	1c43      	adds	r3, r0, #1
 8001252:	d102      	bne.n	800125a <_lseek_r+0x1e>
 8001254:	6823      	ldr	r3, [r4, #0]
 8001256:	b103      	cbz	r3, 800125a <_lseek_r+0x1e>
 8001258:	602b      	str	r3, [r5, #0]
 800125a:	bd38      	pop	{r3, r4, r5, pc}
 800125c:	200000e8 	.word	0x200000e8

08001260 <__malloc_lock>:
 8001260:	4770      	bx	lr

08001262 <__malloc_unlock>:
 8001262:	4770      	bx	lr

08001264 <_read_r>:
 8001264:	b538      	push	{r3, r4, r5, lr}
 8001266:	4c07      	ldr	r4, [pc, #28]	; (8001284 <_read_r+0x20>)
 8001268:	4605      	mov	r5, r0
 800126a:	4608      	mov	r0, r1
 800126c:	4611      	mov	r1, r2
 800126e:	2200      	movs	r2, #0
 8001270:	6022      	str	r2, [r4, #0]
 8001272:	461a      	mov	r2, r3
 8001274:	f7ff faa0 	bl	80007b8 <_read>
 8001278:	1c43      	adds	r3, r0, #1
 800127a:	d102      	bne.n	8001282 <_read_r+0x1e>
 800127c:	6823      	ldr	r3, [r4, #0]
 800127e:	b103      	cbz	r3, 8001282 <_read_r+0x1e>
 8001280:	602b      	str	r3, [r5, #0]
 8001282:	bd38      	pop	{r3, r4, r5, pc}
 8001284:	200000e8 	.word	0x200000e8

08001288 <_init>:
 8001288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800128a:	bf00      	nop
 800128c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800128e:	bc08      	pop	{r3}
 8001290:	469e      	mov	lr, r3
 8001292:	4770      	bx	lr

08001294 <_fini>:
 8001294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001296:	bf00      	nop
 8001298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800129a:	bc08      	pop	{r3}
 800129c:	469e      	mov	lr, r3
 800129e:	4770      	bx	lr
